$parameter MATRIX_NNZ         60000
$parameter MATRIX_ORDER       13000


$storage mem : $array [ MATRIX_NNZ ] $of $uint<16>
$storage code_block : $array [ MATRIX_ORDER ] $of $float<8,23>
$storage aPriori    : $array [ MATRIX_ORDER ] $of $float<8,23>
$storage aPosteriori    : $array [ MATRIX_ORDER ] $of $float<8,23>
$storage message : $array [ MATRIX_NNZ ] $of $float <8,23>
$storage ext_info : $array [ MATRIX_NNZ ] $of $float <8,23>


$pipe maxNitr_in : $uint<16>
$pipe ebbyNo_in  : $float<8,23>
$pipe maxNitr_out : $uint<16>
$pipe ebbyNo_out : $float<8,23>
$pipe matrix_in : $uint<16>  $depth 2
$pipe rate_in  : $float<8,23>
$pipe rate_out  : $float<8,23>
$pipe code_block_in: $float<8,23> $depth 2
$pipe code_block_decoded: $float<8,23> 
$pipe Nitr_required : $uint<16>
$pipe mem_out : $uint<16> $depth 2
$pipe aPriori_out: $float<8,23> 
$pipe init_message_out : $float<8,23> 
$pipe init_aPosteriori_out : $float<8,23> 
$pipe init_ext_info_out : $float<8,23>
$pipe ext_info_out : $float<8,23>
$pipe index_2D_pipe : $uint<16>
$pipe val_pipe : $float<8,23>
$pipe sign_pipe: $float<8,23>
$pipe temp_info_pipe : $float<8,23>
$pipe aPosteriori_out : $float<8,23>
$pipe decode_done : $uint<16>
$pipe message_out : $float<8,23>

$module [initInputs] $in () $out (nrows ncols ncol_ind maxNitr: $uint<16> ebbyNo rate: $float<8,23>) $is
{
	maxNitr := maxNitr_in
	ebbyNo := ebbyNo_in
	nrows := matrix_in
	ncols := matrix_in
	ncol_ind := matrix_in
	range := (ncol_ind + nrows)

	$branchblock [matrixRead] {

		range_min_1 := (range - 1)
		$dopipeline $depth 7 $buffering 1

			$merge $entry $loopback
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on $loopback
			$endmerge 
			NI := (I+1)
			mem[(I+3)] := matrix_in

		$while (I < range_min_1)
	}
	rate := rate_in
}

//
// reading code block to decode
$module [readCodeBlock] $in (ncols: $uint<16>) $out () $is
{
	ncols_minus_1 := (ncols - 1)
	$branchblock [readCodeBlockLoop] {
		$dopipeline $depth 7 $buffering 1 
			$merge $entry $loopback 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on $loopback
			$endmerge 
			NI := (I + 1)
			code_block[I] := code_block_in
		$while (I < ncols_minus_1)
	}
}

//
//
$module [initialize_aPriori] $in (ncols: $uint<16> ebbyNo rate: $float<8,23>) $out() $is
{

	ncols_minus_1 := (ncols - 1)
	$branchblock [init_aPriori_loop] {
		//$dopipeline $depth 7 $buffering 1 
			$merge loopback $entry  
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			temp1 := (rate * ebbyNo) 
			temp2 := (temp1 * code_block[I])
			temp3 :=  (temp2 * ($bitcast ($float<8,23>) _f-4.00e+0) )
			aPriori[I] := temp3
		$if (I < ncols_minus_1) $then
			$place[loopback]
		$endif	
		}
}

//
//
$module [initializeMessage] $in ( ncol_ind: $uint<16>  ) $out() $is
{

	ncol_ind_minus_1 := (ncol_ind - 1)
	$branchblock [initializeMessage_loop] 
	{
		//$dopipeline $depth 512 $buffering 1 
			$merge loopback $entry  
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			temp0 := (3 + I) 
			temp1 := mem[ temp0 ]
			temp2 := ( temp1 - 1 )
			val := aPriori[ temp2 ]
			message[I] := val 
		$if (I < ncol_ind_minus_1) $then
			$place[loopback]
		$endif	
		}
}
//
//
$module [initialize_aPosteriori] $in (ncols: $uint<16>) $out() $is
{

	ncols_minus_1 := (ncols - 1)
	$branchblock [initialize_aPosteriori_loop] {
		//$dopipeline $depth 7 $buffering 1 
			$merge loopback $entry  
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			aPosteriori[I] := aPriori[I] 	
		$if (I < ncols_minus_1)	 $then
			$place[loopback]
		$endif
		}
}

//
//
$module [initializeExtrinsicInfo] $in ( ncol_ind: $uint<16>  ) $out() $is
{

	ncol_ind_minus_1 := (ncol_ind - 1)
	$branchblock [initializeExtrinsicInfo_loop] {
		//$dopipeline $depth 7 $buffering 1 
			$merge loopback $entry  
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			ext_info[I] := _f0.00e+0
		$if (I < ncol_ind_minus_1)	$then 
			$place[loopback]
		$endif		
		}
}
//
//

	$module [checkNodeComputeEngine] $in (ncol_ind nrows: $uint<16> ) $out() $is
{
//	row := ((nrows - nrows )+1)
	nrows_minus_1 := (nrows - 1)
	$branchblock [checkNodeComputeEngine_loop1] 
	{ 
	$merge loopback1 $entry 
	$phi row := ($bitcast ($uint<16>) 0) $on $entry Nrow $on loopback1
	$endmerge
	Nrow := (row + 1)
	temp00 := (3 + ncol_ind )
	temp01 := ( temp00 + row )
	CHECK_BIT_COUNT1 := (ncol_ind - ( mem[temp01] -1 ) )	
	temp10 := (3 + ncol_ind )
	temp11 := ( temp10 + row )
	temp12 := ( 1 + temp11 )
	CHECK_BIT_COUNT2 := (mem[temp12] - mem[temp11])
	
 
	range := ($mux (row == nrows_minus_1)  CHECK_BIT_COUNT1 CHECK_BIT_COUNT2)
//
		col := ((range - range)+1) 
		range_minus_1 := (range- 1)
		$branchblock [checkNodeComputeEngine_loop2] 
		{
		$merge loopback2 $entry 
		$phi col := ($bitcast ($uint<16>) 0) $on $entry Ncol $on loopback2
		$endmerge
		Ncol := (col + 1)
		temp20 := (3 + ncol_ind )
		temp21 := (temp20 + row )
		index_2D := ((mem[temp21] -1) + col )
 
			$branchblock [checkNodeComputeEngine_loop3] 
			{
			$merge loopback $entry  
			$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$phi flag := ($bitcast ($uint<1>) 0) $on $entry next_flag $on loopback	
			$phi exor := ($bitcast ($uint<1>) 0) $on $entry next_exor $on loopback	
			$phi val := ($bitcast ($float<8,23>) _f0.00e+0) $on $entry next_val $on loopback	
			$endmerge
			NI := (I + 1)
			
			index := ( (mem[((3 + ncol_ind) + row)] -1) + I )
			mod_temp30 := ( message[index] * ($bitcast ($float<8,23>) _f-1.00e+0) )
			condition_mesg := (message[index] < ($bitcast ($float<8,23>) _f0.00e+0)) 
			temp1 := ($mux condition_mesg  mod_temp30 message[index])			
				condition_I := (I==col)
				condition_flag := (flag == 0)
				condition_swap := ( temp1 < val )
				condtion_exor_1 := ((~condition_I) &condition_mesg)
				condtion_val_init := ((~condition_I) & condition_flag ) 
				condtion_val_swap_par :=     ( ( ~condition_I) & condition_swap ) 
				condtion_val_swap := ((~condition_flag) & condtion_val_swap_par )
				condition_val_change := (condtion_val_init|condtion_val_swap) 
				next_flag := ($mux condition_I flag  1)
				next_exor := ($mux condtion_exor_1  (exor^1) exor)
				next_val:= ($mux condition_val_change  temp1 val)
				
				
			$if (I < range_minus_1) $then
				$place[loopback]
			$endif	
			}(val => val exor =>exor)
			
			sign := ($mux  (exor == 0)  ($bitcast ($float<8,23>) _f1.00e+0) ($bitcast ($float<8,23>) _f-1.00e+0))

			temp_info := ( val * sign )
			ext_info[ index_2D ] := temp_info 
		$if (col < range_minus_1) $then 
			$place [loopback2]
		$endif	
		}
	
	$if (row < nrows_minus_1) $then
		$place [loopback1]	
	$endif
	}
}
//
//
$module [update_aPosteriori] $in (ncol_ind: $uint<16>) $out() $is
{

	ncol_ind_minus_1 := (ncol_ind - 1)
	$branchblock [update_aPosteriori_loop] {
	$merge  loopback  $entry
	$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
	$endmerge
	NI := (I + 1)
	//
	val := ( mem[(3+I)]-1 )
	temp := ( aPosteriori[val] + ext_info[I] ) 
	aPosteriori[val] := temp 
	//
	$if (I < ncol_ind_minus_1 ) $then
		$place[loopback]
	$endif	
	}
}

$module [checkIsdecoded] $in (ncols: $uint<16>) $out( is_decoded: $uint<1>) $is
{	
	ncols_minus_1 := (ncols - 1)
	$branchblock [checkIsdecoded_loop] {
	$merge loopback  $entry 
	$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
	$phi is_decoded_tmp := ($bitcast ($uint<1>) 1) $on $entry next_is_decoded_tmp $on loopback
	$endmerge
	NI := (I + 1)
	c_aPosteriori := (aPosteriori[I] > 0)
	c_code_block  := (code_block[I] < 0)
	c_is_decoded0_1 :=  ((~c_code_block) & c_aPosteriori) 
	c_is_decoded0_2 :=  ((~c_aPosteriori) & c_code_block)
	c_is_decoded0 := ( c_is_decoded0_1 | c_is_decoded0_2 )
	next_is_decoded_tmp :=($mux c_is_decoded0  0  is_decoded_tmp)
	$guard (c_aPosteriori) code_block[I] := _f-1.00e+0
	$guard (~c_aPosteriori) code_block[I] := _f1.00e+0
	
	$if (I < ncols_minus_1) $then
		$place[loopback]
	$endif	
	}(is_decoded_tmp => is_decoded_tmp)
	is_decoded := is_decoded_tmp 
	

}

//
//
//
//
$module [updateMessage] $in (nrows ncol_ind: $uint<16>) $out() $is
{
	
	nrows_minus_1 := (nrows - 1)
	$branchblock [updateMessage_loop1] {
	//$dopipeline $depth 7 $buffering 1 
			$merge loopback1 $entry
				$phi row := ($bitcast ($uint<16>) 0) $on $entry Nrow $on loopback1
			$endmerge
	Nrow := (row + 1)
	temp00 := (3 + ncol_ind )
	temp01 := ( temp00 + row )
	CHECK_BIT_COUNT1 := (ncol_ind - ( mem[temp01] -1 ) )	
	temp10 := (3 + ncol_ind )
	temp11 := ( temp10 + row )
	temp12 := ( 1 + temp11 )
	CHECK_BIT_COUNT2 := (mem[temp12] - mem[temp11])
	range := ($mux (row==nrows_minus_1) CHECK_BIT_COUNT1 CHECK_BIT_COUNT2)
		
		range_minus_1 := (range - 1)
		$branchblock [updateMessage_loop2] {
		$merge loopback $entry  
		$phi col := ($bitcast ($uint<16>) 0) $on $entry Ncol $on loopback
		$endmerge
		Ncol := (col + 1)
		//
		index_2D := ( (mem[((3 + ncol_ind) + row)] -1 )+ col )
		index_1D := ( mem [(3 + index_2D)] - 1 )
		message [ index_2D ] := ( aPosteriori[index_1D] - ext_info [index_2D] )
		//
		$if(col < range_minus_1) $then
			$place[loopback]
		$endif	
		}
	$if (row < nrows_minus_1) $then
		$place [loopback1]
	$endif	
	}
}
//
//
//
$module [minSumDecode] $in () $out () $is
{

	

		$call initInputs () (nrows ncols ncol_ind maxNitr ebbyNo rate)
		$call readCodeBlock (ncols) ()
		
//--------------------------------------------------
//send inputs
	maxNitr_out := maxNitr
	ebbyNo_out := ebbyNo

	range_minus_1 := (((nrows+ncol_ind)+3) - 1)
	$branchblock [send_outputs_loop] 
	{
	$merge loopback $entry  
	$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
	$endmerge
	
	NI := (I + 1)
	val := mem[I]
	mem_out := val 
	
	$if (I < range_minus_1)	 $then
			$place[loopback]
		$endif	
	}				

	rate_out := rate
	
	
	
// send code block in 
	ncols_minus_1 := (ncols - 1)
	$branchblock [readCodeBlockLoop1] {
		$dopipeline $depth 7 $buffering 1 
			$merge $entry $loopback 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on $loopback
			$endmerge 
			NI := (I + 1)
			code_block_decoded := code_block[I] 
		$while (I < ncols_minus_1)
	}
//---------------------------------------------------------
		$call initialize_aPriori (ncols ebbyNo rate) ()
//-----------------------------------------------------------		
	// read_apriori_init
	//
	$branchblock [readCodeBlockLoop11] {
			$merge loopback $entry  
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge 
			NI := (I + 1)
			aPriori_out := aPriori[I] 
		$if (I < ncols_minus_1) $then
			$place[loopback]
		$endif
	}	

//------------------------------------------------------------
		$call initializeMessage (ncol_ind) ()
//------------------------------------------------------------

// read message


	//
		ncol_ind_minus_1 := (ncol_ind - 1)
	$branchblock [initializeMessage_loop1] {

			$merge  loopback $entry 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)

			init_message_out := message[I]  
		$if(I < ncol_ind_minus_1)	$then
					$place[loopback]
		$endif
		}
// loop 2-----------------------------------------
nloop_minus_one := ((ncol_ind - ncol_ind)+1)
	$branchblock [initializeMessage_loop456] {
			$merge lOopback $entry  
				$phi II := ($bitcast ($uint<16>) 0) $on $entry NII $on lOopback
			$endmerge
			NII := (II + 1)
//----------------------------------------------------------
$call initialize_aPosteriori ( ncols) () 
//----------------------------------------------------------

// read init aposteriori


	$branchblock [initialize_aPosteriori_loop1] {
			$merge loopback  $entry 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			init_aPosteriori_out := aPosteriori[I] 	
		$if(I < ncols_minus_1) $then
							$place[loopback]
		$endif	
		}	
//----------------------------------------------------------
$call initializeExtrinsicInfo (ncol_ind) ()
//----------------------------------------------------------

// read init ext info 
	
	$branchblock [initializeExtrinsicInfo_loop1] {
			$merge loopback  $entry 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			init_ext_info_out := ext_info[I] 
		$if (I < ncol_ind_minus_1) $then
			$place[loopback]
		$endif	
		}
//---------------------------------------------------------
$call checkNodeComputeEngine (ncol_ind nrows) ()
//-------------------------------------------------

// read ext_info
	$branchblock [initializeExtrinsicInfo_loop2] {
			$merge  loopback $entry 
				$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
			$endmerge
			NI := (I + 1)
			ext_info_out := ext_info[I] 
		$if  (I < ncol_ind_minus_1) $then
			$place[loopback]
		$endif	
		}
//---------------------------------------------------------
$call update_aPosteriori(ncol_ind) ()
//--------------------------------------------------------

//
// read aposteriori

	$branchblock [update_aPosteriori_loop11] {
	$merge loopback $entry  
	$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
	$endmerge
	NI := (I + 1)
	//
    aPosteriori_out := aPosteriori[I] 
	//
	$if (I < ncols_minus_1)	$then
			$place[loopback]
		$endif	
	}
	
//-----------------------------------------------------------
$call checkIsdecoded(ncols) (is_decoded)
//----------------------------------------------------------
//
// read 
	val_decode := ($mux is_decoded ($bitcast ($uint<16>) 1) ($bitcast ($uint<16>) 0))
	decode_done := val_decode 
//------------------------------------------------------------
$call updateMessage(nrows ncol_ind) ()
//-----------------------------------------------------------


//
// read 
	$branchblock [update_aPosteriori_loop111] {
	$merge loopback  $entry 
	$phi I := ($bitcast ($uint<16>) 0) $on $entry NI $on loopback
	$endmerge
	NI := (I + 1)
	//
    message_out := message[I] 
	//
	$if (I < ncol_ind_minus_1)	$then
			$place[loopback]
		$endif
	}

// call 2 values
$if (II < nloop_minus_one) $then
	$place[lOopback]
$endif	
		}

} //end min sum


