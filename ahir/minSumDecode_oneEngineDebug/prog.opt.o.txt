; ModuleID = 'prog.opt.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

@.str = private constant [11 x i8] c"maxNitr_in\00"
@maxNitr = common global i16 0, align 2
@.str1 = private constant [10 x i8] c"ebbyNo_in\00"
@ebbyNo = common global float 0.000000e+00, align 4
@.str2 = private constant [10 x i8] c"matrix_in\00"
@mem = common global [512 x i16] zeroinitializer, align 16
@nrows = common global i16 0, align 2
@ncols = common global i16 0, align 2
@ncol_ind = common global i16 0, align 2
@.str3 = private constant [8 x i8] c"rate_in\00"
@rate = common global float 0.000000e+00, align 4
@.str4 = private constant [14 x i8] c"code_block_in\00"
@code_block = common global [512 x float] zeroinitializer, align 16
@aPriori = common global [512 x float] zeroinitializer, align 16
@.str5 = private constant [8 x i8] c"mem_out\00"
@.str6 = private constant [15 x i8] c"code_block_out\00"
@.str7 = private constant [12 x i8] c"aPriori_out\00"
@message = common global [512 x float] zeroinitializer, align 16

define void @initInputs() nounwind {
  %nitr = alloca i16, align 2
  %SNR = alloca float, align 4
  %I = alloca i16, align 2
  %val = alloca i16, align 2
  %range = alloca i16, align 2
  %Rate = alloca float, align 4
  %1 = getelementptr [11 x i8]* @.str, i32 0, i32 0
  %2 = call zeroext i16 @read_uint16(i8* %1)
  store i16 %2, i16* %nitr, align 2
  %3 = load i16* %nitr, align 2
  store i16 %3, i16* @maxNitr, align 2
  %4 = getelementptr [10 x i8]* @.str1, i32 0, i32 0
  %5 = call float @read_float32(i8* %4)
  store float %5, float* %SNR, align 4
  %6 = load float* %SNR, align 4
  store float %6, float* @ebbyNo, align 4
  store i16 0, i16* %I, align 2
  br label %7

; <label>:7                                       ; preds = %18, %0
  %8 = load i16* %I, align 2
  %9 = zext i16 %8 to i32
  %10 = icmp slt i32 %9, 3
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %7
  %12 = getelementptr [10 x i8]* @.str2, i32 0, i32 0
  %13 = call zeroext i16 @read_uint16(i8* %12)
  store i16 %13, i16* %val, align 2
  %14 = load i16* %val, align 2
  %15 = load i16* %I, align 2
  %16 = zext i16 %15 to i64
  %17 = getelementptr inbounds [512 x i16]* @mem, i32 0, i64 %16
  store i16 %14, i16* %17
  br label %18

; <label>:18                                      ; preds = %11
  %19 = load i16* %I, align 2
  %20 = add i16 %19, 1
  store i16 %20, i16* %I, align 2
  br label %7

; <label>:21                                      ; preds = %7
  %22 = getelementptr [512 x i16]* @mem, i32 0, i64 0
  %23 = load i16* %22
  store i16 %23, i16* @nrows, align 2
  %24 = getelementptr [512 x i16]* @mem, i32 0, i64 1
  %25 = load i16* %24
  store i16 %25, i16* @ncols, align 2
  %26 = getelementptr [512 x i16]* @mem, i32 0, i64 2
  %27 = load i16* %26
  store i16 %27, i16* @ncol_ind, align 2
  %28 = getelementptr [512 x i16]* @mem, i32 0, i64 2
  %29 = load i16* %28
  %30 = zext i16 %29 to i32
  %31 = getelementptr [512 x i16]* @mem, i32 0, i64 0
  %32 = load i16* %31
  %33 = zext i16 %32 to i32
  %34 = add nsw i32 %30, %33
  %35 = trunc i32 %34 to i16
  store i16 %35, i16* %range, align 2
  store i16 0, i16* %I, align 2
  br label %36

; <label>:36                                      ; preds = %51, %21
  %37 = load i16* %I, align 2
  %38 = zext i16 %37 to i32
  %39 = load i16* %range, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp slt i32 %38, %40
  br i1 %41, label %42, label %54

; <label>:42                                      ; preds = %36
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %43 = getelementptr [10 x i8]* @.str2, i32 0, i32 0
  %44 = call zeroext i16 @read_uint16(i8* %43)
  store i16 %44, i16* %val, align 2
  %45 = load i16* %val, align 2
  %46 = load i16* %I, align 2
  %47 = zext i16 %46 to i32
  %48 = add nsw i32 %47, 3
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [512 x i16]* @mem, i32 0, i64 %49
  store i16 %45, i16* %50
  br label %51

; <label>:51                                      ; preds = %42
  %52 = load i16* %I, align 2
  %53 = add i16 %52, 1
  store i16 %53, i16* %I, align 2
  br label %36

; <label>:54                                      ; preds = %36
  %55 = getelementptr [8 x i8]* @.str3, i32 0, i32 0
  %56 = call float @read_float32(i8* %55)
  store float %56, float* %Rate, align 4
  %57 = load float* %Rate, align 4
  store float %57, float* @rate, align 4
  ret void
}

declare zeroext i16 @read_uint16(i8*)

declare float @read_float32(i8*)

declare void @__loop_pipelining_on__(i32, i32, i32)

define void @readCodeBlock() nounwind {
  %I = alloca i8, align 1
  %code_bit = alloca float, align 4
  store i8 0, i8* %I, align 1
  br label %1

; <label>:1                                       ; preds = %14, %0
  %2 = load i8* %I, align 1
  %3 = zext i8 %2 to i32
  %4 = load i16* @ncols, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %17

; <label>:7                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %8 = getelementptr [14 x i8]* @.str4, i32 0, i32 0
  %9 = call float @read_float32(i8* %8)
  store float %9, float* %code_bit, align 4
  %10 = load float* %code_bit, align 4
  %11 = load i8* %I, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [512 x float]* @code_block, i32 0, i64 %12
  store float %10, float* %13
  br label %14

; <label>:14                                      ; preds = %7
  %15 = load i8* %I, align 1
  %16 = add i8 %15, 1
  store i8 %16, i8* %I, align 1
  br label %1

; <label>:17                                      ; preds = %1
  ret void
}

define void @initialize_aPriori() nounwind {
  %I = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %13, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = load i16* @ncols, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %16

; <label>:7                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 0)
  %8 = load i16* %I, align 2
  %9 = uitofp i16 %8 to float
  %10 = load i16* %I, align 2
  %11 = zext i16 %10 to i64
  %12 = getelementptr inbounds [512 x float]* @aPriori, i32 0, i64 %11
  store float %9, float* %12
  br label %13

; <label>:13                                      ; preds = %7
  %14 = load i16* %I, align 2
  %15 = add i16 %14, 1
  store i16 %15, i16* %I, align 2
  br label %1

; <label>:16                                      ; preds = %1
  ret void
}

define i32 @send_output() nounwind {
  %1 = alloca i32, align 4
  %J = alloca i32, align 4
  %val = alloca i16, align 2
  %val1 = alloca float, align 4
  %val2 = alloca float, align 4
  store i32 0, i32* %J, align 4
  br label %2

; <label>:2                                       ; preds = %18, %0
  %3 = load i32* %J, align 4
  %4 = load i16* @nrows, align 2
  %5 = zext i16 %4 to i32
  %6 = load i16* @ncol_ind, align 2
  %7 = zext i16 %6 to i32
  %8 = add nsw i32 %5, %7
  %9 = add nsw i32 %8, 3
  %10 = icmp slt i32 %3, %9
  br i1 %10, label %11, label %21

; <label>:11                                      ; preds = %2
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %12 = load i32* %J, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [512 x i16]* @mem, i32 0, i64 %13
  %15 = load i16* %14
  store i16 %15, i16* %val, align 2
  %16 = load i16* %val, align 2
  %17 = getelementptr [8 x i8]* @.str5, i32 0, i32 0
  call void @write_uint16(i8* %17, i16 zeroext %16)
  br label %18

; <label>:18                                      ; preds = %11
  %19 = load i32* %J, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %J, align 4
  br label %2

; <label>:21                                      ; preds = %2
  store i32 0, i32* %J, align 4
  br label %22

; <label>:22                                      ; preds = %34, %21
  %23 = load i32* %J, align 4
  %24 = load i16* @ncols, align 2
  %25 = zext i16 %24 to i32
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %27, label %37

; <label>:27                                      ; preds = %22
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %28 = load i32* %J, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [512 x float]* @code_block, i32 0, i64 %29
  %31 = load float* %30
  store float %31, float* %val1, align 4
  %32 = load float* %val1, align 4
  %33 = getelementptr [15 x i8]* @.str6, i32 0, i32 0
  call void @write_float32(i8* %33, float %32)
  br label %34

; <label>:34                                      ; preds = %27
  %35 = load i32* %J, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %J, align 4
  br label %22

; <label>:37                                      ; preds = %22
  store i32 0, i32* %J, align 4
  br label %38

; <label>:38                                      ; preds = %50, %37
  %39 = load i32* %J, align 4
  %40 = load i16* @ncols, align 2
  %41 = zext i16 %40 to i32
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %53

; <label>:43                                      ; preds = %38
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %44 = load i32* %J, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [512 x float]* @aPriori, i32 0, i64 %45
  %47 = load float* %46
  store float %47, float* %val2, align 4
  %48 = load float* %val2, align 4
  %49 = getelementptr [12 x i8]* @.str7, i32 0, i32 0
  call void @write_float32(i8* %49, float %48)
  br label %50

; <label>:50                                      ; preds = %43
  %51 = load i32* %J, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %J, align 4
  br label %38

; <label>:53                                      ; preds = %38
  %54 = load i32* %1
  ret i32 %54
}

declare void @write_uint16(i8*, i16 zeroext)

declare void @write_float32(i8*, float)

define void @top_daemon() nounwind {
  %nitr = alloca i8, align 1
  br label %1

; <label>:1                                       ; preds = %1, %0
  call void @initInputs()
  call void @readCodeBlock()
  store i8 1, i8* %nitr, align 1
  call void @initialize_aPriori()
  %2 = call i32 @send_output()
  br label %1
                                                  ; No predecessors!
  ret void
}
