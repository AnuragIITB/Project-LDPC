// Aa code produced by llvm2aa (version 1.0)
$pipe aPriori_out : $float<8,23> $depth 1
$pipe code_block_in : $float<8,23> $depth 1
$pipe code_block_out : $float<8,23> $depth 2
$pipe ebbyNo_in : $float<8,23> $depth 1
$pipe matrix_in : $uint<16> $depth 1
$pipe maxNitr_in : $uint<16> $depth 1
$pipe mem_out : $uint<16> $depth 1
$pipe rate_in : $float<8,23> $depth 2
$storage maxNitr:$uint<16>
$storage ebbyNo:$float<8,23>
$module [ebbyNo_initializer_in_progx_xoptx_xo] $in () $out () $is 
{
  ebbyNo := _h0
  $attribute nooptimize 
}
$storage mem:$array [512] $of $uint<16>
$storage nrows:$uint<16>
$storage ncols:$uint<16>
$storage ncol_ind:$uint<16>
$storage rate:$float<8,23>
$module [rate_initializer_in_progx_xoptx_xo] $in () $out () $is 
{
  rate := _h0
  $attribute nooptimize 
}
$storage code_block:$array [512] $of $float<8,23>
$storage aPriori:$array [512] $of $float<8,23>
$module [progx_xoptx_xo_storage_initializer_] $in () $out () $is 
{
  $parallelblock [pb] 
  {
    $call ebbyNo_initializer_in_progx_xoptx_xo () () 
    $call rate_initializer_in_progx_xoptx_xo () () 
  }
  $attribute initializer
}
$module [initInputs] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage nitr_alloc : $uint<16>
    $storage SNR_alloc : $float<8,23>
    $storage I_alloc : $uint<16>
    $storage val_alloc : $uint<16>
    $storage range_alloc : $uint<16>
    $storage Rate_alloc : $float<8,23>
    nitr := @(nitr_alloc)
    SNR := @(SNR_alloc)
    I := @(I_alloc)
    val := @(val_alloc)
    range := @(range_alloc)
    Rate := @(Rate_alloc)
    iNsTr_1 := maxNitr_in
    ->(nitr) := iNsTr_1
    // load 
    iNsTr_3 := ->(nitr) 
    maxNitr := iNsTr_3
    iNsTr_6 := ebbyNo_in
    ->(SNR) := iNsTr_6
    // load 
    iNsTr_8 := ->(SNR) 
    ebbyNo := iNsTr_8
    ->(I) := ( $bitcast ($uint<16> ) _b0000000000000000 ) 
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 bb_3_bb_1
    $endmerge
    // load 
    iNsTr_12 := ->(I) 
    iNsTr_13 := ($cast ($uint<32>) iNsTr_12)
    // compare instruction
    iNsTr_14 := ( ($bitcast ( $int<32>) iNsTr_13) <   ($bitcast ( $int<32>) ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 )  ) )
    $if iNsTr_14 $then  $place [bb_1_bb_2] $else $place [bb_1_bb_4] $endif 
    //begin: basic-block bb_2
    $merge bb_1_bb_2
    $endmerge
    iNsTr_17 := matrix_in
    ->(val) := iNsTr_17
    // load 
    iNsTr_19 := ->(val) 
    // load 
    iNsTr_20 := ->(I) 
    iNsTr_21 := ($cast ($uint<64>) iNsTr_20)
    iNsTr_22 := @(mem[iNsTr_21])
    ->(iNsTr_22) := iNsTr_19
    $place [bb_2_bb_3]
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    // load 
    iNsTr_45 := ->(I) 
    iNsTr_46 := (iNsTr_45 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    ->(I) := iNsTr_46
    $place [bb_3_bb_1]
    //begin: basic-block bb_4
    $merge bb_1_bb_4
    $endmerge
    iNsTr_25 := @(mem[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    iNsTr_26 := ->(iNsTr_25) 
    nrows := iNsTr_26
    iNsTr_28 := @(mem[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000001 ) ])
    // load 
    iNsTr_29 := ->(iNsTr_28) 
    ncols := iNsTr_29
    iNsTr_31 := @(mem[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    iNsTr_32 := ->(iNsTr_31) 
    ncol_ind := iNsTr_32
    iNsTr_34 := @(mem[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000010 ) ])
    // load 
    iNsTr_35 := ->(iNsTr_34) 
    iNsTr_36 := ($cast ($uint<32>) iNsTr_35)
    iNsTr_37 := @(mem[( $bitcast ($uint<64> ) _b0000000000000000000000000000000000000000000000000000000000000000 ) ])
    // load 
    iNsTr_38 := ->(iNsTr_37) 
    iNsTr_39 := ($cast ($uint<32>) iNsTr_38)
    iNsTr_40 := (iNsTr_36 + iNsTr_39)
    iNsTr_41 := ($cast ($uint<16>) iNsTr_40)
    ->(range) := iNsTr_41
    ->(I) := ( $bitcast ($uint<16> ) _b0000000000000000 ) 
    $place [bb_4_bb_5]
    //begin: basic-block bb_5
    $merge bb_4_bb_5 bb_7_bb_5
    $endmerge
    // load 
    iNsTr_49 := ->(I) 
    iNsTr_50 := ($cast ($uint<32>) iNsTr_49)
    // load 
    iNsTr_51 := ->(range) 
    iNsTr_52 := ($cast ($uint<32>) iNsTr_51)
    // compare instruction
    iNsTr_53 := ( ($bitcast ( $int<32>) iNsTr_50) <   ($bitcast ( $int<32>) iNsTr_52 ) )
    $if iNsTr_53 $then  $place [bb_5_bb_6] $else $place [bb_5_bb_8] $endif 
    //begin: basic-block bb_6
    $merge bb_5_bb_6
    $endmerge
    iNsTr_57 := matrix_in
    ->(val) := iNsTr_57
    // load 
    iNsTr_59 := ->(val) 
    // load 
    iNsTr_60 := ->(I) 
    iNsTr_61 := ($cast ($uint<32>) iNsTr_60)
    iNsTr_62 := (iNsTr_61 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    iNsTr_63 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) iNsTr_62) )
    iNsTr_64 := @(mem[iNsTr_63])
    ->(iNsTr_64) := iNsTr_59
    $place [bb_6_bb_7]
    //begin: basic-block bb_7
    $merge bb_6_bb_7
    $endmerge
    // load 
    iNsTr_73 := ->(I) 
    iNsTr_74 := (iNsTr_73 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    ->(I) := iNsTr_74
    $place [bb_7_bb_5]
    //begin: basic-block bb_8
    $merge bb_5_bb_8
    $endmerge
    iNsTr_68 := rate_in
    ->(Rate) := iNsTr_68
    // load 
    iNsTr_70 := ->(Rate) 
    rate := iNsTr_70
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [readCodeBlock] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage I_alloc : $uint<8>
    $storage code_bit_alloc : $float<8,23>
    I := @(I_alloc)
    code_bit := @(code_bit_alloc)
    ->(I) := ( $bitcast ($uint<8> ) _b00000000 ) 
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 bb_3_bb_1
    $endmerge
    // load 
    iNsTr_2 := ->(I) 
    iNsTr_3 := ($cast ($uint<32>) iNsTr_2)
    // load 
    iNsTr_4 := ncols
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4)
    // compare instruction
    iNsTr_6 := ( ($bitcast ( $int<32>) iNsTr_3) <   ($bitcast ( $int<32>) iNsTr_5 ) )
    $if iNsTr_6 $then  $place [bb_1_bb_2] $else $place [bb_1_bb_4] $endif 
    //begin: basic-block bb_2
    $merge bb_1_bb_2
    $endmerge
    iNsTr_10 := code_block_in
    ->(code_bit) := iNsTr_10
    // load 
    iNsTr_12 := ->(code_bit) 
    // load 
    iNsTr_13 := ->(I) 
    iNsTr_14 := ($cast ($uint<64>) iNsTr_13)
    iNsTr_15 := @(code_block[iNsTr_14])
    ->(iNsTr_15) := iNsTr_12
    $place [bb_2_bb_3]
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    // load 
    iNsTr_19 := ->(I) 
    iNsTr_20 := (iNsTr_19 + ( $bitcast ($uint<8> ) _b00000001 ) )
    ->(I) := iNsTr_20
    $place [bb_3_bb_1]
    //begin: basic-block bb_4
    $merge bb_1_bb_4
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [initialize_aPriori] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage I_alloc : $uint<16>
    I := @(I_alloc)
    ->(I) := ( $bitcast ($uint<16> ) _b0000000000000000 ) 
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 bb_3_bb_1
    $endmerge
    // load 
    iNsTr_2 := ->(I) 
    iNsTr_3 := ($cast ($uint<32>) iNsTr_2)
    // load 
    iNsTr_4 := ncols
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4)
    // compare instruction
    iNsTr_6 := ( ($bitcast ( $int<32>) iNsTr_3) <   ($bitcast ( $int<32>) iNsTr_5 ) )
    $if iNsTr_6 $then  $place [bb_1_bb_2] $else $place [bb_1_bb_4] $endif 
    //begin: basic-block bb_2
    $merge bb_1_bb_2
    $endmerge
    // load 
    iNsTr_9 := ->(I) 
    iNsTr_10 := ($cast ($float<8,23>) iNsTr_9)
    // load 
    iNsTr_11 := ->(I) 
    iNsTr_12 := ($cast ($uint<64>) iNsTr_11)
    iNsTr_13 := @(aPriori[iNsTr_12])
    ->(iNsTr_13) := iNsTr_10
    $place [bb_2_bb_3]
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    // load 
    iNsTr_17 := ->(I) 
    iNsTr_18 := (iNsTr_17 + ( $bitcast ($uint<16> ) _b0000000000000001 ) )
    ->(I) := iNsTr_18
    $place [bb_3_bb_1]
    //begin: basic-block bb_4
    $merge bb_1_bb_4
    $endmerge
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [send_output] 
$in ()
$out (ret_val__ : $uint<32>)
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage iNsTr_0_alloc : $uint<32>
    $storage J_alloc : $uint<32>
    $storage val_alloc : $uint<16>
    $storage val1_alloc : $float<8,23>
    $storage val2_alloc : $float<8,23>
    iNsTr_0 := @(iNsTr_0_alloc)
    J := @(J_alloc)
    val := @(val_alloc)
    val1 := @(val1_alloc)
    val2 := @(val2_alloc)
    ->(J) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) 
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 bb_3_bb_1
    $endmerge
    // load 
    iNsTr_3 := ->(J) 
    // load 
    iNsTr_4 := nrows
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4)
    // load 
    iNsTr_6 := ncol_ind
    iNsTr_7 := ($cast ($uint<32>) iNsTr_6)
    iNsTr_8 := (iNsTr_5 + iNsTr_7)
    iNsTr_9 := (iNsTr_8 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000011 ) )
    // compare instruction
    iNsTr_10 := ( ($bitcast ( $int<32>) iNsTr_3) <   ($bitcast ( $int<32>) iNsTr_9 ) )
    $if iNsTr_10 $then  $place [bb_1_bb_2] $else $place [bb_1_bb_4] $endif 
    //begin: basic-block bb_2
    $merge bb_1_bb_2
    $endmerge
    // load 
    iNsTr_13 := ->(J) 
    iNsTr_14 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) iNsTr_13) )
    iNsTr_15 := @(mem[iNsTr_14])
    // load 
    iNsTr_16 := ->(iNsTr_15) 
    ->(val) := iNsTr_16
    // load 
    iNsTr_18 := ->(val) 
    mem_out := iNsTr_18
    $place [bb_2_bb_3]
    //begin: basic-block bb_3
    $merge bb_2_bb_3
    $endmerge
    // load 
    iNsTr_24 := ->(J) 
    iNsTr_25 := (iNsTr_24 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    ->(J) := iNsTr_25
    $place [bb_3_bb_1]
    //begin: basic-block bb_4
    $merge bb_1_bb_4
    $endmerge
    ->(J) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) 
    $place [bb_4_bb_5]
    //begin: basic-block bb_5
    $merge bb_4_bb_5 bb_7_bb_5
    $endmerge
    // load 
    iNsTr_28 := ->(J) 
    // load 
    iNsTr_29 := ncols
    iNsTr_30 := ($cast ($uint<32>) iNsTr_29)
    // compare instruction
    iNsTr_31 := ( ($bitcast ( $int<32>) iNsTr_28) <   ($bitcast ( $int<32>) iNsTr_30 ) )
    $if iNsTr_31 $then  $place [bb_5_bb_6] $else $place [bb_5_bb_8] $endif 
    //begin: basic-block bb_6
    $merge bb_5_bb_6
    $endmerge
    // load 
    iNsTr_34 := ->(J) 
    iNsTr_35 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) iNsTr_34) )
    iNsTr_36 := @(code_block[iNsTr_35])
    // load 
    iNsTr_37 := ->(iNsTr_36) 
    ->(val1) := iNsTr_37
    // load 
    iNsTr_39 := ->(val1) 
    code_block_out := iNsTr_39
    $place [bb_6_bb_7]
    //begin: basic-block bb_7
    $merge bb_6_bb_7
    $endmerge
    // load 
    iNsTr_45 := ->(J) 
    iNsTr_46 := (iNsTr_45 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    ->(J) := iNsTr_46
    $place [bb_7_bb_5]
    //begin: basic-block bb_8
    $merge bb_5_bb_8
    $endmerge
    ->(J) := ( $bitcast ($uint<32> ) _b00000000000000000000000000000000 ) 
    $place [bb_8_bb_9]
    //begin: basic-block bb_9
    $merge bb_11_bb_9 bb_8_bb_9
    $endmerge
    // load 
    iNsTr_49 := ->(J) 
    // load 
    iNsTr_50 := ncols
    iNsTr_51 := ($cast ($uint<32>) iNsTr_50)
    // compare instruction
    iNsTr_52 := ( ($bitcast ( $int<32>) iNsTr_49) <   ($bitcast ( $int<32>) iNsTr_51 ) )
    $if iNsTr_52 $then  $place [bb_9_bb_10] $else $place [bb_9_bb_12] $endif 
    //begin: basic-block bb_10
    $merge bb_9_bb_10
    $endmerge
    // load 
    iNsTr_55 := ->(J) 
    iNsTr_56 :=  ($bitcast ($uint<64>) ( $cast ($int< 64 > ) iNsTr_55) )
    iNsTr_57 := @(aPriori[iNsTr_56])
    // load 
    iNsTr_58 := ->(iNsTr_57) 
    ->(val2) := iNsTr_58
    // load 
    iNsTr_60 := ->(val2) 
    aPriori_out := iNsTr_60
    $place [bb_10_bb_11]
    //begin: basic-block bb_11
    $merge bb_10_bb_11
    $endmerge
    // load 
    iNsTr_66 := ->(J) 
    iNsTr_67 := (iNsTr_66 + ( $bitcast ($uint<32> ) _b00000000000000000000000000000001 ) )
    ->(J) := iNsTr_67
    $place [bb_11_bb_9]
    //begin: basic-block bb_12
    $merge bb_9_bb_12
    $endmerge
    // load 
    ret_val__ := ->(iNsTr_0) 
    $place [return__]
    $merge return__ $endmerge
  }
}
$module [top_daemon] 
$in ()
$out ()
$is 
{
  $branchblock [body] 
  {
    //begin: basic-block bb_0
    $storage nitr_alloc : $uint<8>
    nitr := @(nitr_alloc)
    $place [bb_0_bb_1]
    //begin: basic-block bb_1
    $merge bb_0_bb_1 bb_1_bb_1
    $endmerge
    $call initInputs ()  ()
    $call readCodeBlock ()  ()
    ->(nitr) := ( $bitcast ($uint<8> ) _b00000001 ) 
    $call initialize_aPriori ()  ()
    $call send_output ()  (iNsTr_5)
    $place [bb_1_bb_1]
    //begin: basic-block bb_2
    $place [return__]
    $merge return__ $endmerge
  }
}
