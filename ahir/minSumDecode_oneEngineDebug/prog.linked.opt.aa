$storage  aPriori : $array[512] $of $float<8,23> // memory space index = 0  base address = 0  word size = 32
// can point into 
$pipe  aPriori_out : $float<8,23>  $depth 1 
// can point into 
$storage  code_block : $array[512] $of $float<8,23> // memory space index = 1  base address = 0  word size = 32
// can point into 
$pipe  code_block_in : $float<8,23>  $depth 1 
// can point into 
$pipe  code_block_out : $float<8,23>  $depth 2 
// can point into 
$storage  ebbyNo : $float<8,23> // memory space index = 2  base address = 0  word size = 32
// can point into 
$pipe  ebbyNo_in : $float<8,23>  $depth 1 
// can point into 
$pipe  matrix_in : $uint<16>  $depth 1 
// can point into 
$storage  maxNitr : $uint<16> // memory space index = 3  base address = 0  word size = 16
// can point into 
$pipe  maxNitr_in : $uint<16>  $depth 1 
// can point into 
$storage  mem : $array[512] $of $uint<16> // memory space index = 4  base address = 0  word size = 16
// can point into 
$pipe  mem_out : $uint<16>  $depth 1 
// can point into 
$storage  ncol_ind : $uint<16> // memory space index = 5  base address = 0  word size = 16
// can point into 
$storage  ncols : $uint<16> // memory space index = 6  base address = 0  word size = 16
// can point into 
$storage  nrows : $uint<16> // memory space index = 7  base address = 0  word size = 16
// can point into 
$storage  rate : $float<8,23> // memory space index = 8  base address = 0  word size = 32
// can point into 
$pipe  rate_in : $float<8,23>  $depth 2 
// can point into 
$module [ebbyNo_initializer_in_progx_xoptx_xo]
$in ()
$out ()
$is
{
  ebbyNo := _h0 
  $attribute nooptimize 
}
$module [rate_initializer_in_progx_xoptx_xo]
$in ()
$out ()
$is
{
  rate := _h0 
  $attribute nooptimize 
}
$module [progx_xoptx_xo_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call ebbyNo_initializer_in_progx_xoptx_xo () () 
    $call rate_initializer_in_progx_xoptx_xo () () 
  }
  $attribute initializer 
}
$module [global_storage_initializer_]
$in ()
$out ()
$is
{
  $parallelblock[pb]
  {
    $call progx_xoptx_xo_storage_initializer_ () () 
  }
}
$module [initInputs]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $storage  nitr_alloc : $uint<16> // memory space index = 9  base address = 0  word size = 16
    // can point into 
    $storage  SNR_alloc : $float<8,23> // memory space index = 10  base address = 0  word size = 32
    // can point into 
    $storage  I_alloc : $uint<16> // memory space index = 11  base address = 0  word size = 16
    // can point into 
    $storage  val_alloc : $uint<16> // memory space index = 12  base address = 0  word size = 16
    // can point into 
    $storage  range_alloc : $uint<16> // memory space index = 13  base address = 0  word size = 16
    // can point into 
    $storage  Rate_alloc : $float<8,23> // memory space index = 14  base address = 0  word size = 32
    // can point into 
    nitr := @(nitr_alloc)
    SNR := @(SNR_alloc)
    I := @(I_alloc)
    val := @(val_alloc)
    range := @(range_alloc)
    Rate := @(Rate_alloc)
    iNsTr_1 := maxNitr_in
    ->(nitr) := iNsTr_1
    iNsTr_3 := ->(nitr)
    maxNitr := iNsTr_3
    iNsTr_6 := ebbyNo_in
    ->(SNR) := iNsTr_6
    iNsTr_8 := ->(SNR)
    ebbyNo := iNsTr_8
    ->(I) := ($bitcast ($uint<16>) _b0000000000000000  )
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 bb_3_bb_1 
    $endmerge
    iNsTr_12 := ->(I)
    iNsTr_13 := ($cast ($uint<32>) iNsTr_12 )
    iNsTr_14 := (($bitcast ($int<32>) iNsTr_13 ) < ($bitcast ($int<32>) ($bitcast ($uint<32>) _b00000000000000000000000000000011  ) ))
    $if iNsTr_14 $then 
    $place[bb_1_bb_2]
    $else 
    $place[bb_1_bb_4]
    $endif
    $merge bb_1_bb_2 
    $endmerge
    iNsTr_17 := matrix_in
    ->(val) := iNsTr_17
    iNsTr_19 := ->(val)
    iNsTr_20 := ->(I)
    iNsTr_21 := ($cast ($uint<64>) iNsTr_20 )
    iNsTr_22 := @(mem[iNsTr_21])
    ->(iNsTr_22) := iNsTr_19
    $place[bb_2_bb_3]
    $merge bb_2_bb_3 
    $endmerge
    iNsTr_45 := ->(I)
    iNsTr_46 := (iNsTr_45 + ($bitcast ($uint<16>) _b0000000000000001  ))
    ->(I) := iNsTr_46
    $place[bb_3_bb_1]
    $merge bb_1_bb_4 
    $endmerge
    iNsTr_25 := @(mem[($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )])
    iNsTr_26 := ->(iNsTr_25)
    nrows := iNsTr_26
    iNsTr_28 := @(mem[($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000001  )])
    iNsTr_29 := ->(iNsTr_28)
    ncols := iNsTr_29
    iNsTr_31 := @(mem[($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )])
    iNsTr_32 := ->(iNsTr_31)
    ncol_ind := iNsTr_32
    iNsTr_34 := @(mem[($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000010  )])
    iNsTr_35 := ->(iNsTr_34)
    iNsTr_36 := ($cast ($uint<32>) iNsTr_35 )
    iNsTr_37 := @(mem[($bitcast ($uint<64>) _b0000000000000000000000000000000000000000000000000000000000000000  )])
    iNsTr_38 := ->(iNsTr_37)
    iNsTr_39 := ($cast ($uint<32>) iNsTr_38 )
    iNsTr_40 := (iNsTr_36 + iNsTr_39)
    iNsTr_41 := ($cast ($uint<16>) iNsTr_40 )
    ->(range) := iNsTr_41
    ->(I) := ($bitcast ($uint<16>) _b0000000000000000  )
    $place[bb_4_bb_5]
    $merge bb_4_bb_5 bb_7_bb_5 
    $endmerge
    iNsTr_49 := ->(I)
    iNsTr_50 := ($cast ($uint<32>) iNsTr_49 )
    iNsTr_51 := ->(range)
    iNsTr_52 := ($cast ($uint<32>) iNsTr_51 )
    iNsTr_53 := (($bitcast ($int<32>) iNsTr_50 ) < ($bitcast ($int<32>) iNsTr_52 ))
    $if iNsTr_53 $then 
    $place[bb_5_bb_6]
    $else 
    $place[bb_5_bb_8]
    $endif
    $merge bb_5_bb_6 
    $endmerge
    iNsTr_57 := matrix_in
    ->(val) := iNsTr_57
    iNsTr_59 := ->(val)
    iNsTr_60 := ->(I)
    iNsTr_61 := ($cast ($uint<32>) iNsTr_60 )
    iNsTr_62 := (iNsTr_61 + ($bitcast ($uint<32>) _b00000000000000000000000000000011  ))
    iNsTr_63 := ($bitcast ($uint<64>) ($cast ($int<64>) iNsTr_62 ) )
    iNsTr_64 := @(mem[iNsTr_63])
    ->(iNsTr_64) := iNsTr_59
    $place[bb_6_bb_7]
    $merge bb_6_bb_7 
    $endmerge
    iNsTr_73 := ->(I)
    iNsTr_74 := (iNsTr_73 + ($bitcast ($uint<16>) _b0000000000000001  ))
    ->(I) := iNsTr_74
    $place[bb_7_bb_5]
    $merge bb_5_bb_8 
    $endmerge
    iNsTr_68 := rate_in
    ->(Rate) := iNsTr_68
    iNsTr_70 := ->(Rate)
    rate := iNsTr_70
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [initialize_aPriori]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $storage  I_alloc : $uint<16> // memory space index = 15  base address = 0  word size = 16
    // can point into 
    I := @(I_alloc)
    ->(I) := ($bitcast ($uint<16>) _b0000000000000000  )
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 bb_3_bb_1 
    $endmerge
    iNsTr_2 := ->(I)
    iNsTr_3 := ($cast ($uint<32>) iNsTr_2 )
    iNsTr_4 := ncols
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4 )
    iNsTr_6 := (($bitcast ($int<32>) iNsTr_3 ) < ($bitcast ($int<32>) iNsTr_5 ))
    $if iNsTr_6 $then 
    $place[bb_1_bb_2]
    $else 
    $place[bb_1_bb_4]
    $endif
    $merge bb_1_bb_2 
    $endmerge
    iNsTr_9 := ->(I)
    iNsTr_10 := ($cast ($float<8,23>) iNsTr_9 )
    iNsTr_11 := ->(I)
    iNsTr_12 := ($cast ($uint<64>) iNsTr_11 )
    iNsTr_13 := @(aPriori[iNsTr_12])
    ->(iNsTr_13) := iNsTr_10
    $place[bb_2_bb_3]
    $merge bb_2_bb_3 
    $endmerge
    iNsTr_17 := ->(I)
    iNsTr_18 := (iNsTr_17 + ($bitcast ($uint<16>) _b0000000000000001  ))
    ->(I) := iNsTr_18
    $place[bb_3_bb_1]
    $merge bb_1_bb_4 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [readCodeBlock]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $storage  I_alloc : $uint<8> // memory space index = 16  base address = 0  word size = 8
    // can point into 
    $storage  code_bit_alloc : $float<8,23> // memory space index = 17  base address = 0  word size = 32
    // can point into 
    I := @(I_alloc)
    code_bit := @(code_bit_alloc)
    ->(I) := ($bitcast ($uint<8>) _b00000000  )
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 bb_3_bb_1 
    $endmerge
    iNsTr_2 := ->(I)
    iNsTr_3 := ($cast ($uint<32>) iNsTr_2 )
    iNsTr_4 := ncols
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4 )
    iNsTr_6 := (($bitcast ($int<32>) iNsTr_3 ) < ($bitcast ($int<32>) iNsTr_5 ))
    $if iNsTr_6 $then 
    $place[bb_1_bb_2]
    $else 
    $place[bb_1_bb_4]
    $endif
    $merge bb_1_bb_2 
    $endmerge
    iNsTr_10 := code_block_in
    ->(code_bit) := iNsTr_10
    iNsTr_12 := ->(code_bit)
    iNsTr_13 := ->(I)
    iNsTr_14 := ($cast ($uint<64>) iNsTr_13 )
    iNsTr_15 := @(code_block[iNsTr_14])
    ->(iNsTr_15) := iNsTr_12
    $place[bb_2_bb_3]
    $merge bb_2_bb_3 
    $endmerge
    iNsTr_19 := ->(I)
    iNsTr_20 := (iNsTr_19 + ($bitcast ($uint<8>) _b00000001  ))
    ->(I) := iNsTr_20
    $place[bb_3_bb_1]
    $merge bb_1_bb_4 
    $endmerge
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [send_output]
$in ()
$out ( ret_val__ : $uint<32>  )
$is
{
  $branchblock [body]
  {
    $storage  iNsTr_0_alloc : $uint<32> // memory space index = 18  base address = 0  word size = 32
    // can point into 
    $storage  J_alloc : $uint<32> // memory space index = 19  base address = 0  word size = 32
    // can point into 
    $storage  val_alloc : $uint<16> // memory space index = 20  base address = 0  word size = 16
    // can point into 
    $storage  val1_alloc : $float<8,23> // memory space index = 21  base address = 0  word size = 32
    // can point into 
    $storage  val2_alloc : $float<8,23> // memory space index = 22  base address = 0  word size = 32
    // can point into 
    iNsTr_0 := @(iNsTr_0_alloc)
    J := @(J_alloc)
    val := @(val_alloc)
    val1 := @(val1_alloc)
    val2 := @(val2_alloc)
    ->(J) := ($bitcast ($uint<32>) _b00000000000000000000000000000000  )
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 bb_3_bb_1 
    $endmerge
    iNsTr_3 := ->(J)
    iNsTr_4 := nrows
    iNsTr_5 := ($cast ($uint<32>) iNsTr_4 )
    iNsTr_6 := ncol_ind
    iNsTr_7 := ($cast ($uint<32>) iNsTr_6 )
    iNsTr_8 := (iNsTr_5 + iNsTr_7)
    iNsTr_9 := (iNsTr_8 + ($bitcast ($uint<32>) _b00000000000000000000000000000011  ))
    iNsTr_10 := (($bitcast ($int<32>) iNsTr_3 ) < ($bitcast ($int<32>) iNsTr_9 ))
    $if iNsTr_10 $then 
    $place[bb_1_bb_2]
    $else 
    $place[bb_1_bb_4]
    $endif
    $merge bb_1_bb_2 
    $endmerge
    iNsTr_13 := ->(J)
    iNsTr_14 := ($bitcast ($uint<64>) ($cast ($int<64>) iNsTr_13 ) )
    iNsTr_15 := @(mem[iNsTr_14])
    iNsTr_16 := ->(iNsTr_15)
    ->(val) := iNsTr_16
    iNsTr_18 := ->(val)
    mem_out := iNsTr_18
    $place[bb_2_bb_3]
    $merge bb_2_bb_3 
    $endmerge
    iNsTr_24 := ->(J)
    iNsTr_25 := (iNsTr_24 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    ->(J) := iNsTr_25
    $place[bb_3_bb_1]
    $merge bb_1_bb_4 
    $endmerge
    ->(J) := ($bitcast ($uint<32>) _b00000000000000000000000000000000  )
    $place[bb_4_bb_5]
    $merge bb_4_bb_5 bb_7_bb_5 
    $endmerge
    iNsTr_28 := ->(J)
    iNsTr_29 := ncols
    iNsTr_30 := ($cast ($uint<32>) iNsTr_29 )
    iNsTr_31 := (($bitcast ($int<32>) iNsTr_28 ) < ($bitcast ($int<32>) iNsTr_30 ))
    $if iNsTr_31 $then 
    $place[bb_5_bb_6]
    $else 
    $place[bb_5_bb_8]
    $endif
    $merge bb_5_bb_6 
    $endmerge
    iNsTr_34 := ->(J)
    iNsTr_35 := ($bitcast ($uint<64>) ($cast ($int<64>) iNsTr_34 ) )
    iNsTr_36 := @(code_block[iNsTr_35])
    iNsTr_37 := ->(iNsTr_36)
    ->(val1) := iNsTr_37
    iNsTr_39 := ->(val1)
    code_block_out := iNsTr_39
    $place[bb_6_bb_7]
    $merge bb_6_bb_7 
    $endmerge
    iNsTr_45 := ->(J)
    iNsTr_46 := (iNsTr_45 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    ->(J) := iNsTr_46
    $place[bb_7_bb_5]
    $merge bb_5_bb_8 
    $endmerge
    ->(J) := ($bitcast ($uint<32>) _b00000000000000000000000000000000  )
    $place[bb_8_bb_9]
    $merge bb_11_bb_9 bb_8_bb_9 
    $endmerge
    iNsTr_49 := ->(J)
    iNsTr_50 := ncols
    iNsTr_51 := ($cast ($uint<32>) iNsTr_50 )
    iNsTr_52 := (($bitcast ($int<32>) iNsTr_49 ) < ($bitcast ($int<32>) iNsTr_51 ))
    $if iNsTr_52 $then 
    $place[bb_9_bb_10]
    $else 
    $place[bb_9_bb_12]
    $endif
    $merge bb_9_bb_10 
    $endmerge
    iNsTr_55 := ->(J)
    iNsTr_56 := ($bitcast ($uint<64>) ($cast ($int<64>) iNsTr_55 ) )
    iNsTr_57 := @(aPriori[iNsTr_56])
    iNsTr_58 := ->(iNsTr_57)
    ->(val2) := iNsTr_58
    iNsTr_60 := ->(val2)
    aPriori_out := iNsTr_60
    $place[bb_10_bb_11]
    $merge bb_10_bb_11 
    $endmerge
    iNsTr_66 := ->(J)
    iNsTr_67 := (iNsTr_66 + ($bitcast ($uint<32>) _b00000000000000000000000000000001  ))
    ->(J) := iNsTr_67
    $place[bb_11_bb_9]
    $merge bb_9_bb_12 
    $endmerge
    ret_val__ := ->(iNsTr_0)
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
$module [top_daemon]
$in ()
$out ()
$is
{
  $branchblock [body]
  {
    $storage  nitr_alloc : $uint<8> // memory space index = 23  base address = 0  word size = 8
    // can point into 
    nitr := @(nitr_alloc)
    $place[bb_0_bb_1]
    $merge bb_0_bb_1 bb_1_bb_1 
    $endmerge
    $call initInputs () () 
    $call readCodeBlock () () 
    ->(nitr) := ($bitcast ($uint<8>) _b00000001  )
    $call initialize_aPriori () () 
    $call send_output () (iNsTr_5 ) 
    $place[bb_1_bb_1]
    $place[return__]
    $merge return__ 
    $endmerge
  }
}
// Memory space 0: aPriori 
// Memory space 1: code_block 
// Memory space 2: ebbyNo 
// Memory space 3: maxNitr 
// Memory space 4: mem 
// Memory space 5: ncol_ind 
// Memory space 6: ncols 
// Memory space 7: nrows 
// Memory space 8: rate 
// Memory space 9: %initInputs%body:nitr_alloc 
// Memory space 10: %initInputs%body:SNR_alloc 
// Memory space 11: %initInputs%body:I_alloc 
// Memory space 12: %initInputs%body:val_alloc 
// Memory space 13: %initInputs%body:range_alloc 
// Memory space 14: %initInputs%body:Rate_alloc 
// Memory space 15: %initialize_aPriori%body:I_alloc 
// Memory space 16: %readCodeBlock%body:I_alloc 
// Memory space 17: %readCodeBlock%body:code_bit_alloc 
// Memory space 18: %send_output%body:iNsTr_0_alloc 
// Memory space 19: %send_output%body:J_alloc 
// Memory space 20: %send_output%body:val_alloc 
// Memory space 21: %send_output%body:val1_alloc 
// Memory space 22: %send_output%body:val2_alloc 
// Memory space 23: %top_daemon%body:nitr_alloc 
