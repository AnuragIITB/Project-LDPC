; ModuleID = 'prog.opt.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

@.str = private constant [11 x i8] c"maxNitr_in\00"
@maxNitr = common global i16 0, align 2
@.str1 = private constant [10 x i8] c"ebbyNo_in\00"
@ebbyNo = common global float 0.000000e+00, align 4
@.str2 = private constant [10 x i8] c"matrix_in\00"
@mem = common global [20000 x i16] zeroinitializer, align 16
@.str3 = private constant [15 x i8] c"matrix_written\00"
@.str4 = private constant [14 x i8] c"code_block_in\00"
@code_block = common global [13000 x float] zeroinitializer, align 16
@.str5 = private constant [19 x i8] c"code_block_written\00"
@aPriori = common global [13000 x float] zeroinitializer, align 16
@.str6 = private constant [16 x i8] c"aPriori_written\00"
@message = common global [20000 x float] zeroinitializer, align 16
@.str7 = private constant [16 x i8] c"message_written\00"
@aPosteriori = common global [13000 x float] zeroinitializer, align 16
@.str8 = private constant [20 x i8] c"aPosteriori_written\00"
@ext_info = common global [20000 x float] zeroinitializer, align 16
@.str9 = private constant [17 x i8] c"ext_info_written\00"
@.str10 = private constant [17 x i8] c"computation_done\00"
@.str11 = private constant [16 x i8] c"is_decoded_done\00"
@.str12 = private constant [19 x i8] c"code_block_decoded\00"
@.str13 = private constant [14 x i8] c"nitr_required\00"
@.str14 = private constant [16 x i8] c"stop_the_daemon\00"

define void @initInputs() nounwind {
  %nitr = alloca i16, align 2
  %SNR = alloca float, align 4
  %1 = getelementptr [11 x i8]* @.str, i32 0, i32 0
  %2 = call zeroext i16 @read_uint16(i8* %1)
  store i16 %2, i16* %nitr, align 2
  %3 = load i16* %nitr, align 2
  store i16 %3, i16* @maxNitr, align 2
  %4 = getelementptr [10 x i8]* @.str1, i32 0, i32 0
  %5 = call float @read_float32(i8* %4)
  store float %5, float* %SNR, align 4
  %6 = load float* %SNR, align 4
  store float %6, float* @ebbyNo, align 4
  call void @initMem()
  ret void
}

declare zeroext i16 @read_uint16(i8*)

declare float @read_float32(i8*)

define void @initMem() nounwind {
  %I = alloca i16, align 2
  %val = alloca i16, align 2
  %range = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %12, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %15

; <label>:5                                       ; preds = %1
  %6 = getelementptr [10 x i8]* @.str2, i32 0, i32 0
  %7 = call zeroext i16 @read_uint16(i8* %6)
  store i16 %7, i16* %val, align 2
  %8 = load i16* %val, align 2
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %10
  store i16 %8, i16* %11
  br label %12

; <label>:12                                      ; preds = %5
  %13 = load i16* %I, align 2
  %14 = add i16 %13, 1
  store i16 %14, i16* %I, align 2
  br label %1

; <label>:15                                      ; preds = %1
  %16 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %17 = load i16* %16
  %18 = zext i16 %17 to i32
  %19 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %20 = load i16* %19
  %21 = zext i16 %20 to i32
  %22 = add nsw i32 %18, %21
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %range, align 2
  store i16 0, i16* %I, align 2
  br label %24

; <label>:24                                      ; preds = %39, %15
  %25 = load i16* %I, align 2
  %26 = zext i16 %25 to i32
  %27 = load i16* %range, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %42

; <label>:30                                      ; preds = %24
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %31 = getelementptr [10 x i8]* @.str2, i32 0, i32 0
  %32 = call zeroext i16 @read_uint16(i8* %31)
  store i16 %32, i16* %val, align 2
  %33 = load i16* %val, align 2
  %34 = load i16* %I, align 2
  %35 = zext i16 %34 to i32
  %36 = add nsw i32 %35, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %37
  store i16 %33, i16* %38
  br label %39

; <label>:39                                      ; preds = %30
  %40 = load i16* %I, align 2
  %41 = add i16 %40, 1
  store i16 %41, i16* %I, align 2
  br label %24

; <label>:42                                      ; preds = %24
  ret void
}

declare void @__loop_pipelining_on__(i32, i32, i32)

define void @readCodeBlock() nounwind {
  %start_reading_code_block = alloca i8, align 1
  %I = alloca i16, align 2
  %code_bit = alloca float, align 4
  %1 = getelementptr [15 x i8]* @.str3, i32 0, i32 0
  %2 = call zeroext i8 @read_uint8(i8* %1)
  store i8 %2, i8* %start_reading_code_block, align 1
  store i16 0, i16* %I, align 2
  br label %3

; <label>:3                                       ; preds = %17, %0
  %4 = load i16* %I, align 2
  %5 = zext i16 %4 to i32
  %6 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %7 = load i16* %6
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %20

; <label>:10                                      ; preds = %3
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %11 = getelementptr [14 x i8]* @.str4, i32 0, i32 0
  %12 = call float @read_float32(i8* %11)
  store float %12, float* %code_bit, align 4
  %13 = load float* %code_bit, align 4
  %14 = load i16* %I, align 2
  %15 = zext i16 %14 to i64
  %16 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %15
  store float %13, float* %16
  br label %17

; <label>:17                                      ; preds = %10
  %18 = load i16* %I, align 2
  %19 = add i16 %18, 1
  store i16 %19, i16* %I, align 2
  br label %3

; <label>:20                                      ; preds = %3
  %21 = getelementptr [19 x i8]* @.str5, i32 0, i32 0
  call void @write_uint8(i8* %21, i8 zeroext 1)
  ret void
}

declare zeroext i8 @read_uint8(i8*)

declare void @write_uint8(i8*, i8 zeroext)

define void @initialize_aPriori() nounwind {
  %start_initializating_aPriori = alloca i8, align 1
  %I = alloca i16, align 2
  %sigma2 = alloca float, align 4
  %rate = alloca float, align 4
  %1 = getelementptr [19 x i8]* @.str5, i32 0, i32 0
  %2 = call zeroext i8 @read_uint8(i8* %1)
  store i8 %2, i8* %start_initializating_aPriori, align 1
  %3 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %4 = load i16* %3
  %5 = zext i16 %4 to i32
  %6 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %7 = load i16* %6
  %8 = zext i16 %7 to i32
  %9 = sub nsw i32 %5, %8
  %10 = sitofp i32 %9 to float
  %11 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %12 = load i16* %11
  %13 = zext i16 %12 to i32
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %10, %14
  store float %15, float* %rate, align 4
  %16 = load float* %rate, align 4
  %17 = fmul float 2.000000e+00, %16
  %18 = load float* @ebbyNo, align 4
  %19 = fmul float %17, %18
  %20 = fdiv float 1.000000e+00, %19
  store float %20, float* %sigma2, align 4
  store i16 0, i16* %I, align 2
  br label %21

; <label>:21                                      ; preds = %40, %0
  %22 = load i16* %I, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %25 = load i16* %24
  %26 = zext i16 %25 to i32
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %28, label %43

; <label>:28                                      ; preds = %21
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %29 = load i16* %I, align 2
  %30 = zext i16 %29 to i64
  %31 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %30
  %32 = load float* %31
  %33 = fmul float -4.000000e+00, %32
  %34 = load float* %sigma2, align 4
  %35 = fmul float 2.000000e+00, %34
  %36 = fdiv float %33, %35
  %37 = load i16* %I, align 2
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %38
  store float %36, float* %39
  br label %40

; <label>:40                                      ; preds = %28
  %41 = load i16* %I, align 2
  %42 = add i16 %41, 1
  store i16 %42, i16* %I, align 2
  br label %21

; <label>:43                                      ; preds = %21
  %44 = getelementptr [16 x i8]* @.str6, i32 0, i32 0
  call void @write_uint8(i8* %44, i8 zeroext 1)
  ret void
}

define void @initializeMessage() nounwind {
  %start_initializing_message = alloca i8, align 1
  %I = alloca i16, align 2
  %1 = getelementptr [16 x i8]* @.str6, i32 0, i32 0
  %2 = call zeroext i8 @read_uint8(i8* %1)
  store i8 %2, i8* %start_initializing_message, align 1
  store i16 0, i16* %I, align 2
  br label %3

; <label>:3                                       ; preds = %25, %0
  %4 = load i16* %I, align 2
  %5 = zext i16 %4 to i32
  %6 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %7 = load i16* %6
  %8 = zext i16 %7 to i32
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %28

; <label>:10                                      ; preds = %3
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %11 = load i16* %I, align 2
  %12 = zext i16 %11 to i32
  %13 = add nsw i32 3, %12
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %14
  %16 = load i16* %15
  %17 = zext i16 %16 to i32
  %18 = sub nsw i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %19
  %21 = load float* %20
  %22 = load i16* %I, align 2
  %23 = zext i16 %22 to i64
  %24 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %23
  store float %21, float* %24
  br label %25

; <label>:25                                      ; preds = %10
  %26 = load i16* %I, align 2
  %27 = add i16 %26, 1
  store i16 %27, i16* %I, align 2
  br label %3

; <label>:28                                      ; preds = %3
  %29 = getelementptr [16 x i8]* @.str7, i32 0, i32 0
  call void @write_uint8(i8* %29, i8 zeroext 1)
  ret void
}

define void @initialize_aPosteriori() nounwind {
  %start_initializing_aPosteriori = alloca i8, align 1
  %I = alloca i16, align 2
  br label %1

; <label>:1                                       ; preds = %27, %0
  %2 = getelementptr [16 x i8]* @.str7, i32 0, i32 0
  %3 = call zeroext i8 @read_uint8(i8* %2)
  store i8 %3, i8* %start_initializing_aPosteriori, align 1
  %4 = load i8* %start_initializing_aPosteriori, align 1
  %5 = icmp ne i8 %4, 0
  br i1 %5, label %6, label %27

; <label>:6                                       ; preds = %1
  store i16 0, i16* %I, align 2
  br label %7

; <label>:7                                       ; preds = %22, %6
  %8 = load i16* %I, align 2
  %9 = zext i16 %8 to i32
  %10 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %11 = load i16* %10
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %9, %12
  br i1 %13, label %14, label %25

; <label>:14                                      ; preds = %7
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %15 = load i16* %I, align 2
  %16 = zext i16 %15 to i64
  %17 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %16
  %18 = load float* %17
  %19 = load i16* %I, align 2
  %20 = zext i16 %19 to i64
  %21 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %20
  store float %18, float* %21
  br label %22

; <label>:22                                      ; preds = %14
  %23 = load i16* %I, align 2
  %24 = add i16 %23, 1
  store i16 %24, i16* %I, align 2
  br label %7

; <label>:25                                      ; preds = %7
  %26 = getelementptr [20 x i8]* @.str8, i32 0, i32 0
  call void @write_uint8(i8* %26, i8 zeroext 1)
  br label %27

; <label>:27                                      ; preds = %25, %1
  br label %1
                                                  ; No predecessors!
  ret void
}

define void @initializeExtrinsicInfo() nounwind {
  %start_initializing_ext_info = alloca i8, align 1
  %I = alloca i16, align 2
  br label %1

; <label>:1                                       ; preds = %18, %0
  %2 = getelementptr [20 x i8]* @.str8, i32 0, i32 0
  %3 = call zeroext i8 @read_uint8(i8* %2)
  store i8 %3, i8* %start_initializing_ext_info, align 1
  store i16 0, i16* %I, align 2
  br label %4

; <label>:4                                       ; preds = %15, %1
  %5 = load i16* %I, align 2
  %6 = zext i16 %5 to i32
  %7 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %8 = load i16* %7
  %9 = zext i16 %8 to i32
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %18

; <label>:11                                      ; preds = %4
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %12 = load i16* %I, align 2
  %13 = zext i16 %12 to i64
  %14 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %13
  store float 0.000000e+00, float* %14
  br label %15

; <label>:15                                      ; preds = %11
  %16 = load i16* %I, align 2
  %17 = add i16 %16, 1
  store i16 %17, i16* %I, align 2
  br label %4

; <label>:18                                      ; preds = %4
  %19 = getelementptr [17 x i8]* @.str9, i32 0, i32 0
  call void @write_uint8(i8* %19, i8 zeroext 1)
  br label %1
                                                  ; No predecessors!
  ret void
}

define void @checkNodeComputeEngine() nounwind {
  %start_compute_engine = alloca i8, align 1
  %row = alloca i16, align 2
  %col = alloca i16, align 2
  %range = alloca i16, align 2
  %I = alloca i16, align 2
  %val = alloca float, align 4
  %flag = alloca i8, align 1
  %exor = alloca i8, align 1
  %sign = alloca float, align 4
  %index = alloca i16, align 2
  br label %1

; <label>:1                                       ; preds = %226, %0
  %2 = getelementptr [17 x i8]* @.str9, i32 0, i32 0
  %3 = call zeroext i8 @read_uint8(i8* %2)
  store i8 %3, i8* %start_compute_engine, align 1
  store i16 0, i16* %row, align 2
  store i16 0, i16* %col, align 2
  store i16 0, i16* %range, align 2
  store i16 0, i16* %row, align 2
  br label %4

; <label>:4                                       ; preds = %223, %1
  %5 = load i16* %row, align 2
  %6 = zext i16 %5 to i32
  %7 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %8 = load i16* %7
  %9 = zext i16 %8 to i32
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %226

; <label>:11                                      ; preds = %4
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %12 = load i16* %row, align 2
  %13 = zext i16 %12 to i32
  %14 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %15 = load i16* %14
  %16 = zext i16 %15 to i32
  %17 = sub nsw i32 %16, 1
  %18 = icmp eq i32 %13, %17
  br i1 %18, label %19, label %37

; <label>:19                                      ; preds = %11
  %20 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %21 = load i16* %20
  %22 = zext i16 %21 to i32
  %23 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %24 = load i16* %23
  %25 = zext i16 %24 to i32
  %26 = add nsw i32 3, %25
  %27 = load i16* %row, align 2
  %28 = zext i16 %27 to i32
  %29 = add nsw i32 %26, %28
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %30
  %32 = load i16* %31
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 %33, 1
  %35 = sub nsw i32 %22, %34
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %range, align 2
  br label %63

; <label>:37                                      ; preds = %11
  %38 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %39 = load i16* %38
  %40 = zext i16 %39 to i32
  %41 = add nsw i32 3, %40
  %42 = load i16* %row, align 2
  %43 = zext i16 %42 to i32
  %44 = add nsw i32 %41, %43
  %45 = add nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %46
  %48 = load i16* %47
  %49 = zext i16 %48 to i32
  %50 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %51 = load i16* %50
  %52 = zext i16 %51 to i32
  %53 = add nsw i32 3, %52
  %54 = load i16* %row, align 2
  %55 = zext i16 %54 to i32
  %56 = add nsw i32 %53, %55
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %57
  %59 = load i16* %58
  %60 = zext i16 %59 to i32
  %61 = sub nsw i32 %49, %60
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %range, align 2
  br label %63

; <label>:63                                      ; preds = %37, %19
  store i16 0, i16* %col, align 2
  br label %64

; <label>:64                                      ; preds = %219, %63
  %65 = load i16* %col, align 2
  %66 = zext i16 %65 to i32
  %67 = load i16* %range, align 2
  %68 = zext i16 %67 to i32
  %69 = icmp slt i32 %66, %68
  br i1 %69, label %70, label %222

; <label>:70                                      ; preds = %64
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  store i16 0, i16* %I, align 2
  store float 0.000000e+00, float* %val, align 4
  store i8 0, i8* %flag, align 1
  store i8 0, i8* %exor, align 1
  store float 0.000000e+00, float* %sign, align 4
  store i16 0, i16* %I, align 2
  br label %71

; <label>:71                                      ; preds = %144, %70
  %72 = load i16* %I, align 2
  %73 = zext i16 %72 to i32
  %74 = load i16* %range, align 2
  %75 = zext i16 %74 to i32
  %76 = icmp slt i32 %73, %75
  br i1 %76, label %77, label %147

; <label>:77                                      ; preds = %71
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %78 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %79 = load i16* %78
  %80 = zext i16 %79 to i32
  %81 = add nsw i32 3, %80
  %82 = load i16* %row, align 2
  %83 = zext i16 %82 to i32
  %84 = add nsw i32 %81, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %85
  %87 = load i16* %86
  %88 = zext i16 %87 to i32
  %89 = sub nsw i32 %88, 1
  %90 = load i16* %I, align 2
  %91 = zext i16 %90 to i32
  %92 = add nsw i32 %89, %91
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %index, align 2
  %94 = load i16* %I, align 2
  %95 = zext i16 %94 to i32
  %96 = load i16* %col, align 2
  %97 = zext i16 %96 to i32
  %98 = icmp eq i32 %95, %97
  br i1 %98, label %99, label %100

; <label>:99                                      ; preds = %77
  br label %144

; <label>:100                                     ; preds = %77
  %101 = load i16* %index, align 2
  %102 = zext i16 %101 to i64
  %103 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %102
  %104 = load float* %103
  %105 = fpext float %104 to double
  %106 = fcmp oge double %105, 0.000000e+00
  br i1 %106, label %107, label %112

; <label>:107                                     ; preds = %100
  %108 = load i8* %exor, align 1
  %109 = zext i8 %108 to i32
  %110 = xor i32 %109, 0
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %exor, align 1
  br label %117

; <label>:112                                     ; preds = %100
  %113 = load i8* %exor, align 1
  %114 = zext i8 %113 to i32
  %115 = xor i32 %114, 1
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %exor, align 1
  br label %117

; <label>:117                                     ; preds = %112, %107
  %118 = load i8* %flag, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %127

; <label>:121                                     ; preds = %117
  %122 = load i16* %index, align 2
  %123 = zext i16 %122 to i64
  %124 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %123
  %125 = load float* %124
  %126 = call float @absf(float %125)
  store float %126, float* %val, align 4
  br label %142

; <label>:127                                     ; preds = %117
  %128 = load i16* %index, align 2
  %129 = zext i16 %128 to i64
  %130 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %129
  %131 = load float* %130
  %132 = call float @absf(float %131)
  %133 = load float* %val, align 4
  %134 = fcmp olt float %132, %133
  br i1 %134, label %135, label %141

; <label>:135                                     ; preds = %127
  %136 = load i16* %index, align 2
  %137 = zext i16 %136 to i64
  %138 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %137
  %139 = load float* %138
  %140 = call float @absf(float %139)
  store float %140, float* %val, align 4
  br label %141

; <label>:141                                     ; preds = %135, %127
  br label %142

; <label>:142                                     ; preds = %141, %121
  br label %143

; <label>:143                                     ; preds = %142
  store i8 1, i8* %flag, align 1
  br label %144

; <label>:144                                     ; preds = %143, %99
  %145 = load i16* %I, align 2
  %146 = add i16 %145, 1
  store i16 %146, i16* %I, align 2
  br label %71

; <label>:147                                     ; preds = %71
  %148 = load i8* %exor, align 1
  %149 = zext i8 %148 to i32
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

; <label>:151                                     ; preds = %147
  br label %153

; <label>:152                                     ; preds = %147
  br label %153

; <label>:153                                     ; preds = %152, %151
  %154 = phi double [ 1.000000e+00, %151 ], [ -1.000000e+00, %152 ]
  %155 = fptrunc double %154 to float
  store float %155, float* %sign, align 4
  %156 = load float* %val, align 4
  %157 = load float* %sign, align 4
  %158 = fmul float %156, %157
  %159 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %160 = load i16* %159
  %161 = zext i16 %160 to i32
  %162 = add nsw i32 3, %161
  %163 = load i16* %row, align 2
  %164 = zext i16 %163 to i32
  %165 = add nsw i32 %162, %164
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %166
  %168 = load i16* %167
  %169 = zext i16 %168 to i32
  %170 = sub nsw i32 %169, 1
  %171 = load i16* %col, align 2
  %172 = zext i16 %171 to i32
  %173 = add nsw i32 %170, %172
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %174
  store float %158, float* %175
  %176 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %177 = load i16* %176
  %178 = zext i16 %177 to i32
  %179 = add nsw i32 3, %178
  %180 = load i16* %row, align 2
  %181 = zext i16 %180 to i32
  %182 = add nsw i32 %179, %181
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %183
  %185 = load i16* %184
  %186 = zext i16 %185 to i32
  %187 = sub nsw i32 %186, 1
  %188 = load i16* %col, align 2
  %189 = zext i16 %188 to i32
  %190 = add nsw i32 %187, %189
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %191
  %193 = load float* %192
  %194 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %195 = load i16* %194
  %196 = zext i16 %195 to i32
  %197 = add nsw i32 3, %196
  %198 = load i16* %row, align 2
  %199 = zext i16 %198 to i32
  %200 = add nsw i32 %197, %199
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %201
  %203 = load i16* %202
  %204 = zext i16 %203 to i32
  %205 = add nsw i32 3, %204
  %206 = sub nsw i32 %205, 1
  %207 = load i16* %col, align 2
  %208 = zext i16 %207 to i32
  %209 = add nsw i32 %206, %208
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %210
  %212 = load i16* %211
  %213 = zext i16 %212 to i32
  %214 = sub nsw i32 %213, 1
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %215
  %217 = load float* %216
  %218 = fadd float %217, %193
  store float %218, float* %216
  br label %219

; <label>:219                                     ; preds = %153
  %220 = load i16* %col, align 2
  %221 = add i16 %220, 1
  store i16 %221, i16* %col, align 2
  br label %64

; <label>:222                                     ; preds = %64
  br label %223

; <label>:223                                     ; preds = %222
  %224 = load i16* %row, align 2
  %225 = add i16 %224, 1
  store i16 %225, i16* %row, align 2
  br label %4

; <label>:226                                     ; preds = %4
  %227 = getelementptr [17 x i8]* @.str10, i32 0, i32 0
  call void @write_uint8(i8* %227, i8 zeroext 1)
  br label %1
                                                  ; No predecessors!
  ret void
}

define float @absf(float %f) nounwind {
  %1 = alloca float, align 4
  %2 = alloca float, align 4
  store float %f, float* %2, align 4
  %3 = load float* %2, align 4
  %4 = fpext float %3 to double
  %5 = fcmp olt double %4, 0.000000e+00
  br i1 %5, label %6, label %9

; <label>:6                                       ; preds = %0
  %7 = load float* %2, align 4
  %8 = fsub float -0.000000e+00, %7
  store float %8, float* %1
  br label %11

; <label>:9                                       ; preds = %0
  %10 = load float* %2, align 4
  store float %10, float* %1
  br label %11

; <label>:11                                      ; preds = %9, %6
  %12 = load float* %1
  ret float %12
}

define void @checkIsdecoded() nounwind {
  %start_check_is_decoded = alloca i8, align 1
  %is_decoded = alloca i8, align 1
  %I = alloca i16, align 2
  br label %1

; <label>:1                                       ; preds = %54, %0
  %2 = getelementptr [17 x i8]* @.str10, i32 0, i32 0
  %3 = call zeroext i8 @read_uint8(i8* %2)
  store i8 %3, i8* %start_check_is_decoded, align 1
  store i8 1, i8* %is_decoded, align 1
  store i16 0, i16* %I, align 2
  br label %4

; <label>:4                                       ; preds = %51, %1
  %5 = load i16* %I, align 2
  %6 = zext i16 %5 to i32
  %7 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %8 = load i16* %7
  %9 = zext i16 %8 to i32
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %54

; <label>:11                                      ; preds = %4
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %12 = load i16* %I, align 2
  %13 = zext i16 %12 to i64
  %14 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %13
  %15 = load float* %14
  %16 = fpext float %15 to double
  %17 = fcmp ogt double %16, 0.000000e+00
  br i1 %17, label %18, label %30

; <label>:18                                      ; preds = %11
  %19 = load i16* %I, align 2
  %20 = zext i16 %19 to i64
  %21 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %20
  %22 = load float* %21
  %23 = fpext float %22 to double
  %24 = fcmp ogt double %23, 0.000000e+00
  br i1 %24, label %25, label %26

; <label>:25                                      ; preds = %18
  store i8 0, i8* %is_decoded, align 1
  br label %26

; <label>:26                                      ; preds = %25, %18
  %27 = load i16* %I, align 2
  %28 = zext i16 %27 to i64
  %29 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %28
  store float -1.000000e+00, float* %29
  br label %50

; <label>:30                                      ; preds = %11
  %31 = load i16* %I, align 2
  %32 = zext i16 %31 to i64
  %33 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %32
  %34 = load float* %33
  %35 = fpext float %34 to double
  %36 = fcmp olt double %35, 0.000000e+00
  br i1 %36, label %37, label %49

; <label>:37                                      ; preds = %30
  %38 = load i16* %I, align 2
  %39 = zext i16 %38 to i64
  %40 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %39
  %41 = load float* %40
  %42 = fpext float %41 to double
  %43 = fcmp olt double %42, 0.000000e+00
  br i1 %43, label %44, label %45

; <label>:44                                      ; preds = %37
  store i8 0, i8* %is_decoded, align 1
  br label %45

; <label>:45                                      ; preds = %44, %37
  %46 = load i16* %I, align 2
  %47 = zext i16 %46 to i64
  %48 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %47
  store float 1.000000e+00, float* %48
  br label %49

; <label>:49                                      ; preds = %45, %30
  br label %50

; <label>:50                                      ; preds = %49, %26
  br label %51

; <label>:51                                      ; preds = %50
  %52 = load i16* %I, align 2
  %53 = add i16 %52, 1
  store i16 %53, i16* %I, align 2
  br label %4

; <label>:54                                      ; preds = %4
  %55 = load i8* %is_decoded, align 1
  %56 = getelementptr [16 x i8]* @.str11, i32 0, i32 0
  call void @write_uint8(i8* %56, i8 zeroext %55)
  br label %1
                                                  ; No predecessors!
  ret void
}

define void @updateMessage() nounwind {
  %nitr = alloca i8, align 1
  %is_decoded = alloca i8, align 1
  %row = alloca i16, align 2
  %col = alloca i16, align 2
  %range = alloca i16, align 2
  br label %1

; <label>:1                                       ; preds = %154, %0
  %2 = load i8* %nitr, align 1
  %3 = zext i8 %2 to i32
  %4 = load i16* @maxNitr, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %.loopexit

; <label>:7                                       ; preds = %1
  %8 = getelementptr [16 x i8]* @.str11, i32 0, i32 0
  %9 = call zeroext i8 @read_uint8(i8* %8)
  store i8 %9, i8* %is_decoded, align 1
  %10 = load i8* %is_decoded, align 1
  %11 = zext i8 %10 to i32
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %17

; <label>:13                                      ; preds = %7
  %14 = getelementptr [19 x i8]* @.str12, i32 0, i32 0
  call void @write_uint8(i8* %14, i8 zeroext 1)
  %15 = load i8* %nitr, align 1
  %16 = getelementptr [14 x i8]* @.str13, i32 0, i32 0
  call void @write_uint8(i8* %16, i8 zeroext %15)
  br label %157

; <label>:17                                      ; preds = %7
  store i16 0, i16* %row, align 2
  br label %18

; <label>:18                                      ; preds = %149, %17
  %19 = load i16* %row, align 2
  %20 = zext i16 %19 to i32
  %21 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %22 = load i16* %21
  %23 = zext i16 %22 to i32
  %24 = icmp slt i32 %20, %23
  br i1 %24, label %25, label %152

; <label>:25                                      ; preds = %18
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %26 = load i16* %row, align 2
  %27 = zext i16 %26 to i32
  %28 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %29 = load i16* %28
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %30, 1
  %32 = icmp eq i32 %27, %31
  br i1 %32, label %33, label %51

; <label>:33                                      ; preds = %25
  %34 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %35 = load i16* %34
  %36 = zext i16 %35 to i32
  %37 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %38 = load i16* %37
  %39 = zext i16 %38 to i32
  %40 = add nsw i32 3, %39
  %41 = load i16* %row, align 2
  %42 = zext i16 %41 to i32
  %43 = add nsw i32 %40, %42
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %44
  %46 = load i16* %45
  %47 = zext i16 %46 to i32
  %48 = sub nsw i32 %47, 1
  %49 = sub nsw i32 %36, %48
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %range, align 2
  br label %77

; <label>:51                                      ; preds = %25
  %52 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %53 = load i16* %52
  %54 = zext i16 %53 to i32
  %55 = add nsw i32 3, %54
  %56 = load i16* %row, align 2
  %57 = zext i16 %56 to i32
  %58 = add nsw i32 %55, %57
  %59 = add nsw i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %60
  %62 = load i16* %61
  %63 = zext i16 %62 to i32
  %64 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %65 = load i16* %64
  %66 = zext i16 %65 to i32
  %67 = add nsw i32 3, %66
  %68 = load i16* %row, align 2
  %69 = zext i16 %68 to i32
  %70 = add nsw i32 %67, %69
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %71
  %73 = load i16* %72
  %74 = zext i16 %73 to i32
  %75 = sub nsw i32 %63, %74
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %range, align 2
  br label %77

; <label>:77                                      ; preds = %51, %33
  store i16 0, i16* %col, align 2
  br label %78

; <label>:78                                      ; preds = %145, %77
  %79 = load i16* %col, align 2
  %80 = zext i16 %79 to i32
  %81 = load i16* %range, align 2
  %82 = zext i16 %81 to i32
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %148

; <label>:84                                      ; preds = %78
  call void @__loop_pipelining_on__(i32 63, i32 2, i32 0)
  %85 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %86 = load i16* %85
  %87 = zext i16 %86 to i32
  %88 = add nsw i32 3, %87
  %89 = load i16* %row, align 2
  %90 = zext i16 %89 to i32
  %91 = add nsw i32 %88, %90
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %92
  %94 = load i16* %93
  %95 = zext i16 %94 to i32
  %96 = add nsw i32 3, %95
  %97 = sub nsw i32 %96, 1
  %98 = load i16* %col, align 2
  %99 = zext i16 %98 to i32
  %100 = add nsw i32 %97, %99
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %101
  %103 = load i16* %102
  %104 = zext i16 %103 to i32
  %105 = sub nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %106
  %108 = load float* %107
  %109 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %110 = load i16* %109
  %111 = zext i16 %110 to i32
  %112 = add nsw i32 3, %111
  %113 = load i16* %row, align 2
  %114 = zext i16 %113 to i32
  %115 = add nsw i32 %112, %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %116
  %118 = load i16* %117
  %119 = zext i16 %118 to i32
  %120 = sub nsw i32 %119, 1
  %121 = load i16* %col, align 2
  %122 = zext i16 %121 to i32
  %123 = add nsw i32 %120, %122
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %124
  %126 = load float* %125
  %127 = fsub float %108, %126
  %128 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %129 = load i16* %128
  %130 = zext i16 %129 to i32
  %131 = add nsw i32 3, %130
  %132 = load i16* %row, align 2
  %133 = zext i16 %132 to i32
  %134 = add nsw i32 %131, %133
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %135
  %137 = load i16* %136
  %138 = zext i16 %137 to i32
  %139 = sub nsw i32 %138, 1
  %140 = load i16* %col, align 2
  %141 = zext i16 %140 to i32
  %142 = add nsw i32 %139, %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %143
  store float %127, float* %144
  br label %145

; <label>:145                                     ; preds = %84
  %146 = load i16* %col, align 2
  %147 = add i16 %146, 1
  store i16 %147, i16* %col, align 2
  br label %78

; <label>:148                                     ; preds = %78
  br label %149

; <label>:149                                     ; preds = %148
  %150 = load i16* %row, align 2
  %151 = add i16 %150, 1
  store i16 %151, i16* %row, align 2
  br label %18

; <label>:152                                     ; preds = %18
  %153 = getelementptr [16 x i8]* @.str7, i32 0, i32 0
  call void @write_uint8(i8* %153, i8 zeroext 1)
  br label %154

; <label>:154                                     ; preds = %152
  %155 = load i8* %nitr, align 1
  %156 = add i8 %155, 1
  store i8 %156, i8* %nitr, align 1
  br label %1

.loopexit:                                        ; preds = %1
  br label %157

; <label>:157                                     ; preds = %.loopexit, %13
  ret void
}

define void @daemon() nounwind {
  %decoding_done = alloca i8, align 1
  %nitr = alloca i8, align 1
  call void @initInputs()
  %1 = getelementptr [15 x i8]* @.str3, i32 0, i32 0
  call void @write_uint8(i8* %1, i8 zeroext 1)
  %2 = getelementptr [19 x i8]* @.str12, i32 0, i32 0
  %3 = call zeroext i8 @read_uint8(i8* %2)
  store i8 %3, i8* %decoding_done, align 1
  %4 = getelementptr [14 x i8]* @.str13, i32 0, i32 0
  %5 = call zeroext i8 @read_uint8(i8* %4)
  store i8 %5, i8* %nitr, align 1
  %6 = getelementptr [16 x i8]* @.str14, i32 0, i32 0
  call void @write_uint8(i8* %6, i8 zeroext 1)
  ret void
}
