; ModuleID = 'prog.opt.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private constant [10 x i8] c"matrix_in\00"
@mem = common global [20000 x i16] zeroinitializer, align 16
@.str1 = private constant [11 x i8] c"maxNitr_in\00"
@maxNitr = common global i16 0, align 2
@.str2 = private constant [10 x i8] c"ebbyNo_in\00"
@ebbyNo = common global float 0.000000e+00, align 4
@.str3 = private constant [8 x i8] c"rate_in\00"
@rate = common global float 0.000000e+00, align 4
@.str4 = private constant [15 x i8] c"inputs_written\00"
@.str5 = private constant [14 x i8] c"code_block_in\00"
@code_block = common global [13000 x float] zeroinitializer, align 16
@.str6 = private constant [19 x i8] c"code_block_written\00"
@aPriori = common global [13000 x float] zeroinitializer, align 16
@stderr = external global %struct._IO_FILE*
@.str7 = private constant [19 x i8] c"aPriori[%d] = %f \0A\00"
@.str8 = private constant [20 x i8] c"initialize_aPriori1\00"
@.str9 = private constant [20 x i8] c"initialize_aPriori2\00"
@message = common global [20000 x float] zeroinitializer, align 16
@aPosteriori = common global [13000 x float] zeroinitializer, align 16
@ext_info = common global [20000 x float] zeroinitializer, align 16
@.str10 = private constant [16 x i8] c"aPosteriori_out\00"
@.str11 = private constant [15 x i8] c"is_decoded_out\00"
@.str12 = private constant [15 x i8] c"code_block_out\00"

define void @initMem() nounwind {
  %I = alloca i16, align 2
  %val = alloca i16, align 2
  %range = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %12, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = icmp slt i32 %3, 3
  br i1 %4, label %5, label %15

; <label>:5                                       ; preds = %1
  %6 = getelementptr [10 x i8]* @.str, i32 0, i32 0
  %7 = call zeroext i16 @read_uint16(i8* %6)
  store i16 %7, i16* %val, align 2
  %8 = load i16* %val, align 2
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %10
  store i16 %8, i16* %11
  br label %12

; <label>:12                                      ; preds = %5
  %13 = load i16* %I, align 2
  %14 = add i16 %13, 1
  store i16 %14, i16* %I, align 2
  br label %1

; <label>:15                                      ; preds = %1
  %16 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %17 = load i16* %16
  %18 = zext i16 %17 to i32
  %19 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %20 = load i16* %19
  %21 = zext i16 %20 to i32
  %22 = add nsw i32 %18, %21
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %range, align 2
  store i16 0, i16* %I, align 2
  br label %24

; <label>:24                                      ; preds = %39, %15
  %25 = load i16* %I, align 2
  %26 = zext i16 %25 to i32
  %27 = load i16* %range, align 2
  %28 = zext i16 %27 to i32
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %30, label %42

; <label>:30                                      ; preds = %24
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %31 = getelementptr [10 x i8]* @.str, i32 0, i32 0
  %32 = call zeroext i16 @read_uint16(i8* %31)
  store i16 %32, i16* %val, align 2
  %33 = load i16* %val, align 2
  %34 = load i16* %I, align 2
  %35 = zext i16 %34 to i32
  %36 = add nsw i32 %35, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %37
  store i16 %33, i16* %38
  br label %39

; <label>:39                                      ; preds = %30
  %40 = load i16* %I, align 2
  %41 = add i16 %40, 1
  store i16 %41, i16* %I, align 2
  br label %24

; <label>:42                                      ; preds = %24
  ret void
}

declare zeroext i16 @read_uint16(i8*)

declare void @__loop_pipelining_on__(i32, i32, i32)

define void @initInputs() nounwind {
  %nitr = alloca i16, align 2
  %SNR = alloca float, align 4
  %Rate = alloca float, align 4
  %1 = getelementptr [11 x i8]* @.str1, i32 0, i32 0
  %2 = call zeroext i16 @read_uint16(i8* %1)
  store i16 %2, i16* %nitr, align 2
  %3 = load i16* %nitr, align 2
  store i16 %3, i16* @maxNitr, align 2
  %4 = getelementptr [10 x i8]* @.str2, i32 0, i32 0
  %5 = call float @read_float32(i8* %4)
  store float %5, float* %SNR, align 4
  %6 = load float* %SNR, align 4
  store float %6, float* @ebbyNo, align 4
  call void @initMem()
  %7 = getelementptr [8 x i8]* @.str3, i32 0, i32 0
  %8 = call float @read_float32(i8* %7)
  store float %8, float* %Rate, align 4
  %9 = load float* %Rate, align 4
  store float %9, float* @rate, align 4
  %10 = getelementptr [15 x i8]* @.str4, i32 0, i32 0
  call void @write_uint8(i8* %10, i8 zeroext 1)
  ret void
}

declare float @read_float32(i8*)

declare void @write_uint8(i8*, i8 zeroext)

define void @readCodeBlock() nounwind {
  %I = alloca i16, align 2
  %code_bit = alloca float, align 4
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %15, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = getelementptr [14 x i8]* @.str5, i32 0, i32 0
  %10 = call float @read_float32(i8* %9)
  store float %10, float* %code_bit, align 4
  %11 = load float* %code_bit, align 4
  %12 = load i16* %I, align 2
  %13 = zext i16 %12 to i64
  %14 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %13
  store float %11, float* %14
  br label %15

; <label>:15                                      ; preds = %8
  %16 = load i16* %I, align 2
  %17 = add i16 %16, 1
  store i16 %17, i16* %I, align 2
  br label %1

; <label>:18                                      ; preds = %1
  %19 = getelementptr [19 x i8]* @.str6, i32 0, i32 0
  call void @write_uint8(i8* %19, i8 zeroext 1)
  ret void
}

define void @initialize_aPriori() nounwind {
  %I = alloca i16, align 2
  %val1 = alloca float, align 4
  %val2 = alloca float, align 4
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %31, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %34

; <label>:8                                       ; preds = %1
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %10
  %12 = load float* %11
  %13 = fmul float -4.000000e+00, %12
  %14 = load float* @rate, align 4
  %15 = load float* @ebbyNo, align 4
  %16 = fmul float %14, %15
  %17 = fmul float %13, %16
  %18 = load i16* %I, align 2
  %19 = zext i16 %18 to i64
  %20 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %19
  store float %17, float* %20
  %21 = load %struct._IO_FILE** @stderr, align 8
  %22 = load i16* %I, align 2
  %23 = zext i16 %22 to i32
  %24 = load i16* %I, align 2
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %25
  %27 = load float* %26
  %28 = fpext float %27 to double
  %29 = getelementptr [19 x i8]* @.str7, i32 0, i32 0
  %30 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %21, i8* %29, i32 %23, double %28)
  br label %31

; <label>:31                                      ; preds = %8
  %32 = load i16* %I, align 2
  %33 = add i16 %32, 1
  store i16 %33, i16* %I, align 2
  br label %1

; <label>:34                                      ; preds = %1
  %35 = getelementptr [13000 x float]* @aPriori, i32 0, i64 0
  %36 = load float* %35
  store float %36, float* %val1, align 4
  %37 = load float* %val1, align 4
  %38 = getelementptr [20 x i8]* @.str8, i32 0, i32 0
  call void @write_float32(i8* %38, float %37)
  %39 = getelementptr [13000 x float]* @aPriori, i32 0, i64 1
  %40 = load float* %39
  store float %40, float* %val2, align 4
  %41 = load float* %val2, align 4
  %42 = getelementptr [20 x i8]* @.str9, i32 0, i32 0
  call void @write_float32(i8* %42, float %41)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...)

declare void @write_float32(i8*, float)

define void @initializeMessage() nounwind {
  %I = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %23, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %26

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i32
  %11 = add nsw i32 3, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %12
  %14 = load i16* %13
  %15 = zext i16 %14 to i32
  %16 = sub nsw i32 %15, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %17
  %19 = load float* %18
  %20 = load i16* %I, align 2
  %21 = zext i16 %20 to i64
  %22 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %21
  store float %19, float* %22
  br label %23

; <label>:23                                      ; preds = %8
  %24 = load i16* %I, align 2
  %25 = add i16 %24, 1
  store i16 %25, i16* %I, align 2
  br label %1

; <label>:26                                      ; preds = %1
  ret void
}

define void @initialize_aPosteriori() nounwind {
  %I = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %16, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %19

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [13000 x float]* @aPriori, i32 0, i64 %10
  %12 = load float* %11
  %13 = load i16* %I, align 2
  %14 = zext i16 %13 to i64
  %15 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %14
  store float %12, float* %15
  br label %16

; <label>:16                                      ; preds = %8
  %17 = load i16* %I, align 2
  %18 = add i16 %17, 1
  store i16 %18, i16* %I, align 2
  br label %1

; <label>:19                                      ; preds = %1
  ret void
}

define void @initializeExtrinsicInfo() nounwind {
  %I = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %12, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %15

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %10
  store float 0.000000e+00, float* %11
  br label %12

; <label>:12                                      ; preds = %8
  %13 = load i16* %I, align 2
  %14 = add i16 %13, 1
  store i16 %14, i16* %I, align 2
  br label %1

; <label>:15                                      ; preds = %1
  ret void
}

define void @checkNodeComputeEngine() nounwind {
  %row = alloca i16, align 2
  %col = alloca i16, align 2
  %range = alloca i16, align 2
  %I = alloca i16, align 2
  %val = alloca float, align 4
  %flag = alloca i8, align 1
  %exor = alloca i8, align 1
  %sign = alloca float, align 4
  %index = alloca i16, align 2
  store i16 0, i16* %row, align 2
  store i16 0, i16* %col, align 2
  store i16 0, i16* %range, align 2
  store i16 0, i16* %row, align 2
  br label %1

; <label>:1                                       ; preds = %175, %0
  %2 = load i16* %row, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %178

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %row, align 2
  %10 = zext i16 %9 to i32
  %11 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %12 = load i16* %11
  %13 = zext i16 %12 to i32
  %14 = sub nsw i32 %13, 1
  %15 = icmp eq i32 %10, %14
  br i1 %15, label %16, label %34

; <label>:16                                      ; preds = %8
  %17 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %18 = load i16* %17
  %19 = zext i16 %18 to i32
  %20 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %21 = load i16* %20
  %22 = zext i16 %21 to i32
  %23 = add nsw i32 3, %22
  %24 = load i16* %row, align 2
  %25 = zext i16 %24 to i32
  %26 = add nsw i32 %23, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %27
  %29 = load i16* %28
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %30, 1
  %32 = sub nsw i32 %19, %31
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %range, align 2
  br label %60

; <label>:34                                      ; preds = %8
  %35 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %36 = load i16* %35
  %37 = zext i16 %36 to i32
  %38 = add nsw i32 3, %37
  %39 = load i16* %row, align 2
  %40 = zext i16 %39 to i32
  %41 = add nsw i32 %38, %40
  %42 = add nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %43
  %45 = load i16* %44
  %46 = zext i16 %45 to i32
  %47 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %48 = load i16* %47
  %49 = zext i16 %48 to i32
  %50 = add nsw i32 3, %49
  %51 = load i16* %row, align 2
  %52 = zext i16 %51 to i32
  %53 = add nsw i32 %50, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %54
  %56 = load i16* %55
  %57 = zext i16 %56 to i32
  %58 = sub nsw i32 %46, %57
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %range, align 2
  br label %60

; <label>:60                                      ; preds = %34, %16
  store i16 0, i16* %col, align 2
  br label %61

; <label>:61                                      ; preds = %171, %60
  %62 = load i16* %col, align 2
  %63 = zext i16 %62 to i32
  %64 = load i16* %range, align 2
  %65 = zext i16 %64 to i32
  %66 = icmp slt i32 %63, %65
  br i1 %66, label %67, label %174

; <label>:67                                      ; preds = %61
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  store i16 0, i16* %I, align 2
  store float 0.000000e+00, float* %val, align 4
  store i8 0, i8* %flag, align 1
  store i8 0, i8* %exor, align 1
  store float 0.000000e+00, float* %sign, align 4
  store i16 0, i16* %I, align 2
  br label %68

; <label>:68                                      ; preds = %141, %67
  %69 = load i16* %I, align 2
  %70 = zext i16 %69 to i32
  %71 = load i16* %range, align 2
  %72 = zext i16 %71 to i32
  %73 = icmp slt i32 %70, %72
  br i1 %73, label %74, label %144

; <label>:74                                      ; preds = %68
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %75 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %76 = load i16* %75
  %77 = zext i16 %76 to i32
  %78 = add nsw i32 3, %77
  %79 = load i16* %row, align 2
  %80 = zext i16 %79 to i32
  %81 = add nsw i32 %78, %80
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %82
  %84 = load i16* %83
  %85 = zext i16 %84 to i32
  %86 = sub nsw i32 %85, 1
  %87 = load i16* %I, align 2
  %88 = zext i16 %87 to i32
  %89 = add nsw i32 %86, %88
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %index, align 2
  %91 = load i16* %I, align 2
  %92 = zext i16 %91 to i32
  %93 = load i16* %col, align 2
  %94 = zext i16 %93 to i32
  %95 = icmp eq i32 %92, %94
  br i1 %95, label %96, label %97

; <label>:96                                      ; preds = %74
  br label %141

; <label>:97                                      ; preds = %74
  %98 = load i16* %index, align 2
  %99 = zext i16 %98 to i64
  %100 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %99
  %101 = load float* %100
  %102 = fpext float %101 to double
  %103 = fcmp oge double %102, 0.000000e+00
  br i1 %103, label %104, label %109

; <label>:104                                     ; preds = %97
  %105 = load i8* %exor, align 1
  %106 = zext i8 %105 to i32
  %107 = xor i32 %106, 0
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %exor, align 1
  br label %114

; <label>:109                                     ; preds = %97
  %110 = load i8* %exor, align 1
  %111 = zext i8 %110 to i32
  %112 = xor i32 %111, 1
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %exor, align 1
  br label %114

; <label>:114                                     ; preds = %109, %104
  %115 = load i8* %flag, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %124

; <label>:118                                     ; preds = %114
  %119 = load i16* %index, align 2
  %120 = zext i16 %119 to i64
  %121 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %120
  %122 = load float* %121
  %123 = call float @absf(float %122)
  store float %123, float* %val, align 4
  br label %139

; <label>:124                                     ; preds = %114
  %125 = load i16* %index, align 2
  %126 = zext i16 %125 to i64
  %127 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %126
  %128 = load float* %127
  %129 = call float @absf(float %128)
  %130 = load float* %val, align 4
  %131 = fcmp olt float %129, %130
  br i1 %131, label %132, label %138

; <label>:132                                     ; preds = %124
  %133 = load i16* %index, align 2
  %134 = zext i16 %133 to i64
  %135 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %134
  %136 = load float* %135
  %137 = call float @absf(float %136)
  store float %137, float* %val, align 4
  br label %138

; <label>:138                                     ; preds = %132, %124
  br label %139

; <label>:139                                     ; preds = %138, %118
  br label %140

; <label>:140                                     ; preds = %139
  store i8 1, i8* %flag, align 1
  br label %141

; <label>:141                                     ; preds = %140, %96
  %142 = load i16* %I, align 2
  %143 = add i16 %142, 1
  store i16 %143, i16* %I, align 2
  br label %68

; <label>:144                                     ; preds = %68
  %145 = load i8* %exor, align 1
  %146 = zext i8 %145 to i32
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %149

; <label>:148                                     ; preds = %144
  store float 1.000000e+00, float* %sign, align 4
  br label %150

; <label>:149                                     ; preds = %144
  store float -1.000000e+00, float* %sign, align 4
  br label %150

; <label>:150                                     ; preds = %149, %148
  %151 = load float* %val, align 4
  %152 = load float* %sign, align 4
  %153 = fmul float %151, %152
  %154 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %155 = load i16* %154
  %156 = zext i16 %155 to i32
  %157 = add nsw i32 3, %156
  %158 = load i16* %row, align 2
  %159 = zext i16 %158 to i32
  %160 = add nsw i32 %157, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %161
  %163 = load i16* %162
  %164 = zext i16 %163 to i32
  %165 = sub nsw i32 %164, 1
  %166 = load i16* %col, align 2
  %167 = zext i16 %166 to i32
  %168 = add nsw i32 %165, %167
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %169
  store float %153, float* %170
  br label %171

; <label>:171                                     ; preds = %150
  %172 = load i16* %col, align 2
  %173 = add i16 %172, 1
  store i16 %173, i16* %col, align 2
  br label %61

; <label>:174                                     ; preds = %61
  br label %175

; <label>:175                                     ; preds = %174
  %176 = load i16* %row, align 2
  %177 = add i16 %176, 1
  store i16 %177, i16* %row, align 2
  br label %1

; <label>:178                                     ; preds = %1
  ret void
}

define float @absf(float %f) nounwind {
  %1 = alloca float, align 4
  %ret = alloca float, align 4
  store float %f, float* %1, align 4
  %2 = load float* %1, align 4
  %3 = fpext float %2 to double
  %4 = fcmp olt double %3, 0.000000e+00
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = load float* %1, align 4
  %7 = fsub float -0.000000e+00, %6
  store float %7, float* %ret, align 4
  br label %10

; <label>:8                                       ; preds = %0
  %9 = load float* %1, align 4
  store float %9, float* %ret, align 4
  br label %10

; <label>:10                                      ; preds = %8, %5
  %11 = load float* %ret, align 4
  ret float %11
}

define void @update_aPosteriori() nounwind {
  %I = alloca i16, align 2
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %25, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %28

; <label>:8                                       ; preds = %1
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %10
  %12 = load float* %11
  %13 = load i16* %I, align 2
  %14 = zext i16 %13 to i32
  %15 = add nsw i32 3, %14
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %16
  %18 = load i16* %17
  %19 = zext i16 %18 to i32
  %20 = sub nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %21
  %23 = load float* %22
  %24 = fadd float %23, %12
  store float %24, float* %22
  br label %25

; <label>:25                                      ; preds = %8
  %26 = load i16* %I, align 2
  %27 = add i16 %26, 1
  store i16 %27, i16* %I, align 2
  br label %1

; <label>:28                                      ; preds = %1
  ret void
}

define zeroext i8 @checkIsdecoded() nounwind {
  %is_decoded = alloca i8, align 1
  %I = alloca i16, align 2
  store i8 1, i8* %is_decoded, align 1
  store i16 0, i16* %I, align 2
  br label %1

; <label>:1                                       ; preds = %48, %0
  %2 = load i16* %I, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %51

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %I, align 2
  %10 = zext i16 %9 to i64
  %11 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %10
  %12 = load float* %11
  %13 = fpext float %12 to double
  %14 = fcmp ogt double %13, 0.000000e+00
  br i1 %14, label %15, label %27

; <label>:15                                      ; preds = %8
  %16 = load i16* %I, align 2
  %17 = zext i16 %16 to i64
  %18 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %17
  %19 = load float* %18
  %20 = fpext float %19 to double
  %21 = fcmp ogt double %20, 0.000000e+00
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %15
  store i8 0, i8* %is_decoded, align 1
  br label %23

; <label>:23                                      ; preds = %22, %15
  %24 = load i16* %I, align 2
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %25
  store float -1.000000e+00, float* %26
  br label %47

; <label>:27                                      ; preds = %8
  %28 = load i16* %I, align 2
  %29 = zext i16 %28 to i64
  %30 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %29
  %31 = load float* %30
  %32 = fpext float %31 to double
  %33 = fcmp olt double %32, 0.000000e+00
  br i1 %33, label %34, label %46

; <label>:34                                      ; preds = %27
  %35 = load i16* %I, align 2
  %36 = zext i16 %35 to i64
  %37 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %36
  %38 = load float* %37
  %39 = fpext float %38 to double
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %41, label %42

; <label>:41                                      ; preds = %34
  store i8 0, i8* %is_decoded, align 1
  br label %42

; <label>:42                                      ; preds = %41, %34
  %43 = load i16* %I, align 2
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %44
  store float 1.000000e+00, float* %45
  br label %46

; <label>:46                                      ; preds = %42, %27
  br label %47

; <label>:47                                      ; preds = %46, %23
  br label %48

; <label>:48                                      ; preds = %47
  %49 = load i16* %I, align 2
  %50 = add i16 %49, 1
  store i16 %50, i16* %I, align 2
  br label %1

; <label>:51                                      ; preds = %1
  %52 = load i8* %is_decoded, align 1
  ret i8 %52
}

define void @updateMessage() nounwind {
  %row = alloca i16, align 2
  %col = alloca i16, align 2
  %range = alloca i16, align 2
  store i16 0, i16* %row, align 2
  br label %1

; <label>:1                                       ; preds = %132, %0
  %2 = load i16* %row, align 2
  %3 = zext i16 %2 to i32
  %4 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %5 = load i16* %4
  %6 = zext i16 %5 to i32
  %7 = icmp slt i32 %3, %6
  br i1 %7, label %8, label %135

; <label>:8                                       ; preds = %1
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %9 = load i16* %row, align 2
  %10 = zext i16 %9 to i32
  %11 = getelementptr [20000 x i16]* @mem, i32 0, i64 0
  %12 = load i16* %11
  %13 = zext i16 %12 to i32
  %14 = sub nsw i32 %13, 1
  %15 = icmp eq i32 %10, %14
  br i1 %15, label %16, label %34

; <label>:16                                      ; preds = %8
  %17 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %18 = load i16* %17
  %19 = zext i16 %18 to i32
  %20 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %21 = load i16* %20
  %22 = zext i16 %21 to i32
  %23 = add nsw i32 3, %22
  %24 = load i16* %row, align 2
  %25 = zext i16 %24 to i32
  %26 = add nsw i32 %23, %25
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %27
  %29 = load i16* %28
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %30, 1
  %32 = sub nsw i32 %19, %31
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %range, align 2
  br label %60

; <label>:34                                      ; preds = %8
  %35 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %36 = load i16* %35
  %37 = zext i16 %36 to i32
  %38 = add nsw i32 3, %37
  %39 = load i16* %row, align 2
  %40 = zext i16 %39 to i32
  %41 = add nsw i32 %38, %40
  %42 = add nsw i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %43
  %45 = load i16* %44
  %46 = zext i16 %45 to i32
  %47 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %48 = load i16* %47
  %49 = zext i16 %48 to i32
  %50 = add nsw i32 3, %49
  %51 = load i16* %row, align 2
  %52 = zext i16 %51 to i32
  %53 = add nsw i32 %50, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %54
  %56 = load i16* %55
  %57 = zext i16 %56 to i32
  %58 = sub nsw i32 %46, %57
  %59 = trunc i32 %58 to i16
  store i16 %59, i16* %range, align 2
  br label %60

; <label>:60                                      ; preds = %34, %16
  store i16 0, i16* %col, align 2
  br label %61

; <label>:61                                      ; preds = %128, %60
  %62 = load i16* %col, align 2
  %63 = zext i16 %62 to i32
  %64 = load i16* %range, align 2
  %65 = zext i16 %64 to i32
  %66 = icmp slt i32 %63, %65
  br i1 %66, label %67, label %131

; <label>:67                                      ; preds = %61
  call void @__loop_pipelining_on__(i32 16, i32 2, i32 1)
  %68 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %69 = load i16* %68
  %70 = zext i16 %69 to i32
  %71 = add nsw i32 3, %70
  %72 = load i16* %row, align 2
  %73 = zext i16 %72 to i32
  %74 = add nsw i32 %71, %73
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %75
  %77 = load i16* %76
  %78 = zext i16 %77 to i32
  %79 = add nsw i32 3, %78
  %80 = sub nsw i32 %79, 1
  %81 = load i16* %col, align 2
  %82 = zext i16 %81 to i32
  %83 = add nsw i32 %80, %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %84
  %86 = load i16* %85
  %87 = zext i16 %86 to i32
  %88 = sub nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %89
  %91 = load float* %90
  %92 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %93 = load i16* %92
  %94 = zext i16 %93 to i32
  %95 = add nsw i32 3, %94
  %96 = load i16* %row, align 2
  %97 = zext i16 %96 to i32
  %98 = add nsw i32 %95, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %99
  %101 = load i16* %100
  %102 = zext i16 %101 to i32
  %103 = sub nsw i32 %102, 1
  %104 = load i16* %col, align 2
  %105 = zext i16 %104 to i32
  %106 = add nsw i32 %103, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [20000 x float]* @ext_info, i32 0, i64 %107
  %109 = load float* %108
  %110 = fsub float %91, %109
  %111 = getelementptr [20000 x i16]* @mem, i32 0, i64 2
  %112 = load i16* %111
  %113 = zext i16 %112 to i32
  %114 = add nsw i32 3, %113
  %115 = load i16* %row, align 2
  %116 = zext i16 %115 to i32
  %117 = add nsw i32 %114, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [20000 x i16]* @mem, i32 0, i64 %118
  %120 = load i16* %119
  %121 = zext i16 %120 to i32
  %122 = sub nsw i32 %121, 1
  %123 = load i16* %col, align 2
  %124 = zext i16 %123 to i32
  %125 = add nsw i32 %122, %124
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [20000 x float]* @message, i32 0, i64 %126
  store float %110, float* %127
  br label %128

; <label>:128                                     ; preds = %67
  %129 = load i16* %col, align 2
  %130 = add i16 %129, 1
  store i16 %130, i16* %col, align 2
  br label %61

; <label>:131                                     ; preds = %61
  br label %132

; <label>:132                                     ; preds = %131
  %133 = load i16* %row, align 2
  %134 = add i16 %133, 1
  store i16 %134, i16* %row, align 2
  br label %1

; <label>:135                                     ; preds = %1
  ret void
}

define void @top_daemon() nounwind {
  %nitr = alloca i8, align 1
  %P = alloca i32, align 4
  %is_decoded = alloca i8, align 1
  %K = alloca i16, align 2
  call void @initInputs()
  call void @readCodeBlock()
  store i8 1, i8* %nitr, align 1
  call void @initialize_aPriori()
  call void @initializeMessage()
  br label %1

; <label>:1                                       ; preds = %31, %0
  %2 = load i8* %nitr, align 1
  %3 = zext i8 %2 to i32
  %4 = load i16* @maxNitr, align 2
  %5 = zext i16 %4 to i32
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %.loopexit

; <label>:7                                       ; preds = %1
  call void @initialize_aPosteriori()
  call void @initializeExtrinsicInfo()
  call void @checkNodeComputeEngine()
  call void @update_aPosteriori()
  store i32 0, i32* %P, align 4
  store i32 0, i32* %P, align 4
  br label %8

; <label>:8                                       ; preds = %20, %7
  %9 = load i32* %P, align 4
  %10 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %11 = load i16* %10
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %9, %12
  br i1 %13, label %14, label %23

; <label>:14                                      ; preds = %8
  %15 = load i32* %P, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [13000 x float]* @aPosteriori, i32 0, i64 %16
  %18 = load float* %17
  %19 = getelementptr [16 x i8]* @.str10, i32 0, i32 0
  call void @write_float32(i8* %19, float %18)
  br label %20

; <label>:20                                      ; preds = %14
  %21 = load i32* %P, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %P, align 4
  br label %8

; <label>:23                                      ; preds = %8
  %24 = call zeroext i8 @checkIsdecoded()
  store i8 %24, i8* %is_decoded, align 1
  %25 = load i8* %is_decoded, align 1
  %26 = getelementptr [15 x i8]* @.str11, i32 0, i32 0
  call void @write_uint8(i8* %26, i8 zeroext %25)
  %27 = load i8* %is_decoded, align 1
  %28 = icmp ne i8 %27, 0
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %23
  br label %34

; <label>:30                                      ; preds = %23
  call void @updateMessage()
  br label %31

; <label>:31                                      ; preds = %30
  %32 = load i8* %nitr, align 1
  %33 = add i8 %32, 1
  store i8 %33, i8* %nitr, align 1
  br label %1

.loopexit:                                        ; preds = %1
  br label %34

; <label>:34                                      ; preds = %.loopexit, %29
  store i16 0, i16* %K, align 2
  br label %35

; <label>:35                                      ; preds = %48, %34
  %36 = load i16* %K, align 2
  %37 = zext i16 %36 to i32
  %38 = getelementptr [20000 x i16]* @mem, i32 0, i64 1
  %39 = load i16* %38
  %40 = zext i16 %39 to i32
  %41 = icmp slt i32 %37, %40
  br i1 %41, label %42, label %51

; <label>:42                                      ; preds = %35
  %43 = load i16* %K, align 2
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds [13000 x float]* @code_block, i32 0, i64 %44
  %46 = load float* %45
  %47 = getelementptr [15 x i8]* @.str12, i32 0, i32 0
  call void @write_float32(i8* %47, float %46)
  br label %48

; <label>:48                                      ; preds = %42
  %49 = load i16* %K, align 2
  %50 = add i16 %49, 1
  store i16 %50, i16* %K, align 2
  br label %35

; <label>:51                                      ; preds = %35
  ret void
}
